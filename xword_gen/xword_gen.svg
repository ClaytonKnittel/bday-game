<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="70060"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (107 samples, 0.15%)</title><rect x="0.0000%" y="213" width="0.1527%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="107"/><text x="0.2500%" y="223.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (2,539 samples, 3.62%)</title><rect x="0.1527%" y="213" width="3.6240%" height="15" fill="rgb(217,0,24)" fg:x="107" fg:w="2539"/><text x="0.4027%" y="223.50">&lt;dlx..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (2,524 samples, 3.60%)</title><rect x="0.1741%" y="197" width="3.6026%" height="15" fill="rgb(221,193,54)" fg:x="122" fg:w="2524"/><text x="0.4241%" y="207.50">dlx:..</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (52,102 samples, 74.37%)</title><rect x="3.7768%" y="213" width="74.3677%" height="15" fill="rgb(248,212,6)" fg:x="2646" fg:w="52102"/><text x="4.0268%" y="223.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (26,790 samples, 38.24%)</title><rect x="39.9058%" y="197" width="38.2387%" height="15" fill="rgb(208,68,35)" fg:x="27958" fg:w="26790"/><text x="40.1558%" y="207.50">dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.05%)</title><rect x="78.3172%" y="117" width="0.0514%" height="15" fill="rgb(232,128,0)" fg:x="54869" fg:w="36"/><text x="78.5672%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.05%)</title><rect x="78.3200%" y="101" width="0.0485%" height="15" fill="rgb(207,160,47)" fg:x="54871" fg:w="34"/><text x="78.5700%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.03%)</title><rect x="78.3414%" y="85" width="0.0271%" height="15" fill="rgb(228,23,34)" fg:x="54886" fg:w="19"/><text x="78.5914%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.01%)</title><rect x="78.3571%" y="69" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="54897" fg:w="8"/><text x="78.6071%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (37 samples, 0.05%)</title><rect x="78.3172%" y="149" width="0.0528%" height="15" fill="rgb(220,122,19)" fg:x="54869" fg:w="37"/><text x="78.5672%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (37 samples, 0.05%)</title><rect x="78.3172%" y="133" width="0.0528%" height="15" fill="rgb(250,228,42)" fg:x="54869" fg:w="37"/><text x="78.5672%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,797 samples, 13.98%)</title><rect x="78.3700%" y="149" width="13.9837%" height="15" fill="rgb(240,193,28)" fg:x="54906" fg:w="9797"/><text x="78.6200%" y="159.50">&lt;alloc::vec::into_ite..</text></g><g><title>core::hash::BuildHasher::hash_one (2,257 samples, 3.22%)</title><rect x="89.1322%" y="133" width="3.2215%" height="15" fill="rgb(216,20,37)" fg:x="62446" fg:w="2257"/><text x="89.3822%" y="143.50">cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,021 samples, 1.46%)</title><rect x="90.8964%" y="117" width="1.4573%" height="15" fill="rgb(206,188,39)" fg:x="63682" fg:w="1021"/><text x="91.1464%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (106 samples, 0.15%)</title><rect x="93.1930%" y="133" width="0.1513%" height="15" fill="rgb(217,207,13)" fg:x="65291" fg:w="106"/><text x="93.4430%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.06%)</title><rect x="93.2800%" y="117" width="0.0642%" height="15" fill="rgb(231,73,38)" fg:x="65352" fg:w="45"/><text x="93.5300%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10,847 samples, 15.48%)</title><rect x="78.1444%" y="213" width="15.4824%" height="15" fill="rgb(225,20,46)" fg:x="54748" fg:w="10847"/><text x="78.3944%" y="223.50">&lt;std::collections::hash:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,847 samples, 15.48%)</title><rect x="78.1444%" y="197" width="15.4824%" height="15" fill="rgb(210,31,41)" fg:x="54748" fg:w="10847"/><text x="78.3944%" y="207.50">&lt;core::iter::adapters::m..</text></g><g><title>xword_gen::xword::ProblemParameters::build_dlx (10,847 samples, 15.48%)</title><rect x="78.1444%" y="181" width="15.4824%" height="15" fill="rgb(221,200,47)" fg:x="54748" fg:w="10847"/><text x="78.3944%" y="191.50">xword_gen::xword::Proble..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (10,847 samples, 15.48%)</title><rect x="78.1444%" y="165" width="15.4824%" height="15" fill="rgb(226,26,5)" fg:x="54748" fg:w="10847"/><text x="78.3944%" y="175.50">dlx::dlx::Dlx&lt;I,N&gt;::cons..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (888 samples, 1.27%)</title><rect x="92.3594%" y="149" width="1.2675%" height="15" fill="rgb(249,33,26)" fg:x="64707" fg:w="888"/><text x="92.6094%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (198 samples, 0.28%)</title><rect x="93.3443%" y="133" width="0.2826%" height="15" fill="rgb(235,183,28)" fg:x="65397" fg:w="198"/><text x="93.5943%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (123 samples, 0.18%)</title><rect x="93.4513%" y="117" width="0.1756%" height="15" fill="rgb(221,5,38)" fg:x="65472" fg:w="123"/><text x="93.7013%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (53 samples, 0.08%)</title><rect x="93.5512%" y="101" width="0.0756%" height="15" fill="rgb(247,18,42)" fg:x="65542" fg:w="53"/><text x="93.8012%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.03%)</title><rect x="93.6397%" y="197" width="0.0285%" height="15" fill="rgb(241,131,45)" fg:x="65604" fg:w="20"/><text x="93.8897%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.02%)</title><rect x="93.6454%" y="181" width="0.0228%" height="15" fill="rgb(249,31,29)" fg:x="65608" fg:w="16"/><text x="93.8954%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="93.6512%" y="165" width="0.0171%" height="15" fill="rgb(225,111,53)" fg:x="65612" fg:w="12"/><text x="93.9012%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (67 samples, 0.10%)</title><rect x="93.6269%" y="213" width="0.0956%" height="15" fill="rgb(238,160,17)" fg:x="65595" fg:w="67"/><text x="93.8769%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.05%)</title><rect x="93.6683%" y="197" width="0.0542%" height="15" fill="rgb(214,148,48)" fg:x="65624" fg:w="38"/><text x="93.9183%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.03%)</title><rect x="93.6954%" y="181" width="0.0271%" height="15" fill="rgb(232,36,49)" fg:x="65643" fg:w="19"/><text x="93.9454%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="93.7025%" y="165" width="0.0200%" height="15" fill="rgb(209,103,24)" fg:x="65648" fg:w="14"/><text x="93.9525%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (272 samples, 0.39%)</title><rect x="94.2949%" y="133" width="0.3882%" height="15" fill="rgb(229,88,8)" fg:x="66063" fg:w="272"/><text x="94.5449%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (224 samples, 0.32%)</title><rect x="94.3634%" y="117" width="0.3197%" height="15" fill="rgb(213,181,19)" fg:x="66111" fg:w="224"/><text x="94.6134%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (119 samples, 0.17%)</title><rect x="96.9112%" y="101" width="0.1699%" height="15" fill="rgb(254,191,54)" fg:x="67896" fg:w="119"/><text x="97.1612%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (47 samples, 0.07%)</title><rect x="97.0140%" y="85" width="0.0671%" height="15" fill="rgb(241,83,37)" fg:x="67968" fg:w="47"/><text x="97.2640%" y="95.50"></text></g><g><title>__rdl_realloc (12 samples, 0.02%)</title><rect x="97.0639%" y="69" width="0.0171%" height="15" fill="rgb(233,36,39)" fg:x="68003" fg:w="12"/><text x="97.3139%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (780 samples, 1.11%)</title><rect x="95.9806%" y="117" width="1.1133%" height="15" fill="rgb(226,3,54)" fg:x="67244" fg:w="780"/><text x="96.2306%" y="127.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (9 samples, 0.01%)</title><rect x="97.0811%" y="101" width="0.0128%" height="15" fill="rgb(245,192,40)" fg:x="68015" fg:w="9"/><text x="97.3311%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (44 samples, 0.06%)</title><rect x="97.0953%" y="117" width="0.0628%" height="15" fill="rgb(238,167,29)" fg:x="68025" fg:w="44"/><text x="97.3453%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.01%)</title><rect x="97.1439%" y="101" width="0.0143%" height="15" fill="rgb(232,182,51)" fg:x="68059" fg:w="10"/><text x="97.3939%" y="111.50"></text></g><g><title>core::str::count::char_count_general_case (43 samples, 0.06%)</title><rect x="97.1582%" y="117" width="0.0614%" height="15" fill="rgb(231,60,39)" fg:x="68069" fg:w="43"/><text x="97.4082%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,637 samples, 5.19%)</title><rect x="93.9709%" y="181" width="5.1913%" height="15" fill="rgb(208,69,12)" fg:x="65836" fg:w="3637"/><text x="94.2209%" y="191.50">&lt;core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,628 samples, 5.18%)</title><rect x="93.9837%" y="165" width="5.1784%" height="15" fill="rgb(235,93,37)" fg:x="65845" fg:w="3628"/><text x="94.2337%" y="175.50">&lt;alloc..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,488 samples, 4.98%)</title><rect x="94.1836%" y="149" width="4.9786%" height="15" fill="rgb(213,116,39)" fg:x="65985" fg:w="3488"/><text x="94.4336%" y="159.50">&lt;core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,138 samples, 4.48%)</title><rect x="94.6831%" y="133" width="4.4790%" height="15" fill="rgb(222,207,29)" fg:x="66335" fg:w="3138"/><text x="94.9331%" y="143.50">core:..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,361 samples, 1.94%)</title><rect x="97.2195%" y="117" width="1.9426%" height="15" fill="rgb(206,96,30)" fg:x="68112" fg:w="1361"/><text x="97.4695%" y="127.50">x..</text></g><g><title>core::hash::BuildHasher::hash_one (618 samples, 0.88%)</title><rect x="98.2800%" y="101" width="0.8821%" height="15" fill="rgb(218,138,4)" fg:x="68855" fg:w="618"/><text x="98.5300%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (126 samples, 0.18%)</title><rect x="98.9823%" y="85" width="0.1798%" height="15" fill="rgb(250,191,14)" fg:x="69347" fg:w="126"/><text x="99.2323%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,814 samples, 5.44%)</title><rect x="93.7225%" y="197" width="5.4439%" height="15" fill="rgb(239,60,40)" fg:x="65662" fg:w="3814"/><text x="93.9725%" y="207.50">&lt;alloc:..</text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.01%)</title><rect x="99.5318%" y="101" width="0.0114%" height="15" fill="rgb(206,27,48)" fg:x="69732" fg:w="8"/><text x="99.7818%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (12 samples, 0.02%)</title><rect x="99.5818%" y="85" width="0.0171%" height="15" fill="rgb(225,35,8)" fg:x="69767" fg:w="12"/><text x="99.8318%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (10 samples, 0.01%)</title><rect x="99.6275%" y="69" width="0.0143%" height="15" fill="rgb(250,213,24)" fg:x="69799" fg:w="10"/><text x="99.8775%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.01%)</title><rect x="99.6589%" y="53" width="0.0114%" height="15" fill="rgb(247,123,22)" fg:x="69821" fg:w="8"/><text x="99.9089%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (9 samples, 0.01%)</title><rect x="99.6817%" y="37" width="0.0128%" height="15" fill="rgb(231,138,38)" fg:x="69837" fg:w="9"/><text x="99.9317%" y="47.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (4,199 samples, 5.99%)</title><rect x="93.7225%" y="213" width="5.9934%" height="15" fill="rgb(231,145,46)" fg:x="65662" fg:w="4199"/><text x="93.9725%" y="223.50">itertool..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (385 samples, 0.55%)</title><rect x="99.1664%" y="197" width="0.5495%" height="15" fill="rgb(251,118,11)" fg:x="69476" fg:w="385"/><text x="99.4164%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (311 samples, 0.44%)</title><rect x="99.2721%" y="181" width="0.4439%" height="15" fill="rgb(217,147,25)" fg:x="69550" fg:w="311"/><text x="99.5221%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (250 samples, 0.36%)</title><rect x="99.3591%" y="165" width="0.3568%" height="15" fill="rgb(247,81,37)" fg:x="69611" fg:w="250"/><text x="99.6091%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (219 samples, 0.31%)</title><rect x="99.4034%" y="149" width="0.3126%" height="15" fill="rgb(209,12,38)" fg:x="69642" fg:w="219"/><text x="99.6534%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (177 samples, 0.25%)</title><rect x="99.4633%" y="133" width="0.2526%" height="15" fill="rgb(227,1,9)" fg:x="69684" fg:w="177"/><text x="99.7133%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (154 samples, 0.22%)</title><rect x="99.4961%" y="117" width="0.2198%" height="15" fill="rgb(248,47,43)" fg:x="69707" fg:w="154"/><text x="99.7461%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (121 samples, 0.17%)</title><rect x="99.5432%" y="101" width="0.1727%" height="15" fill="rgb(221,10,30)" fg:x="69740" fg:w="121"/><text x="99.7932%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (82 samples, 0.12%)</title><rect x="99.5989%" y="85" width="0.1170%" height="15" fill="rgb(210,229,1)" fg:x="69779" fg:w="82"/><text x="99.8489%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (52 samples, 0.07%)</title><rect x="99.6417%" y="69" width="0.0742%" height="15" fill="rgb(222,148,37)" fg:x="69809" fg:w="52"/><text x="99.8917%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (32 samples, 0.05%)</title><rect x="99.6703%" y="53" width="0.0457%" height="15" fill="rgb(234,67,33)" fg:x="69829" fg:w="32"/><text x="99.9203%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (15 samples, 0.02%)</title><rect x="99.6945%" y="37" width="0.0214%" height="15" fill="rgb(247,98,35)" fg:x="69846" fg:w="15"/><text x="99.9445%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 0.07%)</title><rect x="99.7188%" y="197" width="0.0714%" height="15" fill="rgb(247,138,52)" fg:x="69863" fg:w="50"/><text x="99.9688%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (47 samples, 0.07%)</title><rect x="99.7231%" y="181" width="0.0671%" height="15" fill="rgb(213,79,30)" fg:x="69866" fg:w="47"/><text x="99.9731%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40 samples, 0.06%)</title><rect x="99.7331%" y="165" width="0.0571%" height="15" fill="rgb(246,177,23)" fg:x="69873" fg:w="40"/><text x="99.9831%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.08%)</title><rect x="99.7902%" y="197" width="0.0842%" height="15" fill="rgb(230,62,27)" fg:x="69913" fg:w="59"/><text x="100.0402%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.05%)</title><rect x="99.8259%" y="181" width="0.0485%" height="15" fill="rgb(216,154,8)" fg:x="69938" fg:w="34"/><text x="100.0759%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (32 samples, 0.05%)</title><rect x="99.8287%" y="165" width="0.0457%" height="15" fill="rgb(244,35,45)" fg:x="69940" fg:w="32"/><text x="100.0787%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.04%)</title><rect x="99.8330%" y="149" width="0.0414%" height="15" fill="rgb(251,115,12)" fg:x="69943" fg:w="29"/><text x="100.0830%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (38 samples, 0.05%)</title><rect x="99.9386%" y="181" width="0.0542%" height="15" fill="rgb(240,54,50)" fg:x="70017" fg:w="38"/><text x="100.1886%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="99.9743%" y="165" width="0.0186%" height="15" fill="rgb(233,84,52)" fg:x="70042" fg:w="13"/><text x="100.2243%" y="175.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (198 samples, 0.28%)</title><rect x="99.7160%" y="213" width="0.2826%" height="15" fill="rgb(207,117,47)" fg:x="69861" fg:w="198"/><text x="99.9660%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (87 samples, 0.12%)</title><rect x="99.8744%" y="197" width="0.1242%" height="15" fill="rgb(249,43,39)" fg:x="69972" fg:w="87"/><text x="100.1244%" y="207.50"></text></g><g><title>all (70,060 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="415.50"></text></g><g><title>xword_gen (70,060 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="399.50">xword_gen</text></g><g><title>_start (70,060 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="383.50">_start</text></g><g><title>__libc_start_main_impl (70,060 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="367.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (70,060 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="351.50">__libc_start_call_main</text></g><g><title>main (70,060 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (70,060 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (70,060 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="303.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (70,060 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="287.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (70,060 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="271.50">xword_gen::main</text></g><g><title>util::time::time_fn (70,060 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="255.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordImpl&lt;B&gt; as xword_gen::xword::XWordTraits&gt;::solve (70,060 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="70060"/><text x="0.2500%" y="239.50">&lt;xword_gen::xword::XWordImpl&lt;B&gt; as xword_gen::xword::XWordTraits&gt;::solve</text></g></svg></svg>