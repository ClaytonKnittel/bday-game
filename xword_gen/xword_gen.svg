<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="22033"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (79 samples, 0.36%)</title><rect x="0.0363%" y="245" width="0.3586%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="79"/><text x="0.2863%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (487 samples, 2.21%)</title><rect x="0.3949%" y="245" width="2.2103%" height="15" fill="rgb(217,0,24)" fg:x="87" fg:w="487"/><text x="0.6449%" y="255.50">&lt;..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (426 samples, 1.93%)</title><rect x="0.6717%" y="229" width="1.9335%" height="15" fill="rgb(221,193,54)" fg:x="148" fg:w="426"/><text x="0.9217%" y="239.50">x..</text></g><g><title>core::str::count::char_count_general_case (244 samples, 1.11%)</title><rect x="1.4978%" y="213" width="1.1074%" height="15" fill="rgb(248,212,6)" fg:x="330" fg:w="244"/><text x="1.7478%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="3.0318%" y="133" width="0.0227%" height="15" fill="rgb(208,68,35)" fg:x="668" fg:w="5"/><text x="3.2818%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="3.1181%" y="101" width="0.0318%" height="15" fill="rgb(232,128,0)" fg:x="687" fg:w="7"/><text x="3.3681%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (47 samples, 0.21%)</title><rect x="2.9410%" y="197" width="0.2133%" height="15" fill="rgb(207,160,47)" fg:x="648" fg:w="47"/><text x="3.1910%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.21%)</title><rect x="2.9410%" y="181" width="0.2133%" height="15" fill="rgb(228,23,34)" fg:x="648" fg:w="47"/><text x="3.1910%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.21%)</title><rect x="2.9410%" y="165" width="0.2133%" height="15" fill="rgb(218,30,26)" fg:x="648" fg:w="47"/><text x="3.1910%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.20%)</title><rect x="2.9501%" y="149" width="0.2042%" height="15" fill="rgb(220,122,19)" fg:x="650" fg:w="45"/><text x="3.2001%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.10%)</title><rect x="3.0545%" y="133" width="0.0999%" height="15" fill="rgb(250,228,42)" fg:x="673" fg:w="22"/><text x="3.3045%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.06%)</title><rect x="3.0908%" y="117" width="0.0635%" height="15" fill="rgb(240,193,28)" fg:x="681" fg:w="14"/><text x="3.3408%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (785 samples, 3.56%)</title><rect x="31.2577%" y="165" width="3.5628%" height="15" fill="rgb(216,20,37)" fg:x="6887" fg:w="785"/><text x="31.5077%" y="175.50">&lt;cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,162 samples, 32.51%)</title><rect x="3.1544%" y="197" width="32.5058%" height="15" fill="rgb(206,188,39)" fg:x="695" fg:w="7162"/><text x="3.4044%" y="207.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::..</text></g><g><title>core::hash::BuildHasher::hash_one (1,730 samples, 7.85%)</title><rect x="27.8083%" y="181" width="7.8519%" height="15" fill="rgb(217,207,13)" fg:x="6127" fg:w="1730"/><text x="28.0583%" y="191.50">core::hash:..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (185 samples, 0.84%)</title><rect x="34.8205%" y="165" width="0.8396%" height="15" fill="rgb(231,73,38)" fg:x="7672" fg:w="185"/><text x="35.0705%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition (6 samples, 0.03%)</title><rect x="35.6601%" y="197" width="0.0272%" height="15" fill="rgb(225,20,46)" fg:x="7857" fg:w="6"/><text x="35.9101%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39 samples, 0.18%)</title><rect x="37.2396%" y="165" width="0.1770%" height="15" fill="rgb(210,31,41)" fg:x="8205" fg:w="39"/><text x="37.4896%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (86 samples, 0.39%)</title><rect x="37.0717%" y="181" width="0.3903%" height="15" fill="rgb(221,200,47)" fg:x="8168" fg:w="86"/><text x="37.3217%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.05%)</title><rect x="37.4166%" y="165" width="0.0454%" height="15" fill="rgb(226,26,5)" fg:x="8244" fg:w="10"/><text x="37.6666%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.21%)</title><rect x="37.9567%" y="149" width="0.2088%" height="15" fill="rgb(249,33,26)" fg:x="8363" fg:w="46"/><text x="38.2067%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,845 samples, 35.61%)</title><rect x="2.6143%" y="229" width="35.6057%" height="15" fill="rgb(235,183,28)" fg:x="576" fg:w="7845"/><text x="2.8643%" y="239.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (7,845 samples, 35.61%)</title><rect x="2.6143%" y="213" width="35.6057%" height="15" fill="rgb(221,5,38)" fg:x="576" fg:w="7845"/><text x="2.8643%" y="223.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (558 samples, 2.53%)</title><rect x="35.6874%" y="197" width="2.5326%" height="15" fill="rgb(247,18,42)" fg:x="7863" fg:w="558"/><text x="35.9374%" y="207.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (167 samples, 0.76%)</title><rect x="37.4620%" y="181" width="0.7580%" height="15" fill="rgb(241,131,45)" fg:x="8254" fg:w="167"/><text x="37.7120%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (107 samples, 0.49%)</title><rect x="37.7343%" y="165" width="0.4856%" height="15" fill="rgb(249,31,29)" fg:x="8314" fg:w="107"/><text x="37.9843%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (12 samples, 0.05%)</title><rect x="38.1655%" y="149" width="0.0545%" height="15" fill="rgb(225,111,53)" fg:x="8409" fg:w="12"/><text x="38.4155%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.04%)</title><rect x="38.3833%" y="181" width="0.0363%" height="15" fill="rgb(238,160,17)" fg:x="8457" fg:w="8"/><text x="38.6333%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7,890 samples, 35.81%)</title><rect x="2.6143%" y="245" width="35.8099%" height="15" fill="rgb(214,148,48)" fg:x="576" fg:w="7890"/><text x="2.8643%" y="255.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (45 samples, 0.20%)</title><rect x="38.2199%" y="229" width="0.2042%" height="15" fill="rgb(232,36,49)" fg:x="8421" fg:w="45"/><text x="38.4699%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (39 samples, 0.18%)</title><rect x="38.2472%" y="213" width="0.1770%" height="15" fill="rgb(209,103,24)" fg:x="8427" fg:w="39"/><text x="38.4972%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.06%)</title><rect x="38.3652%" y="197" width="0.0590%" height="15" fill="rgb(229,88,8)" fg:x="8453" fg:w="13"/><text x="38.6152%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="38.6148%" y="213" width="0.0182%" height="15" fill="rgb(213,181,19)" fg:x="8508" fg:w="4"/><text x="38.8648%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.06%)</title><rect x="38.5740%" y="229" width="0.0635%" height="15" fill="rgb(254,191,54)" fg:x="8499" fg:w="14"/><text x="38.8240%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.06%)</title><rect x="38.7419%" y="197" width="0.0590%" height="15" fill="rgb(241,83,37)" fg:x="8536" fg:w="13"/><text x="38.9919%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (89 samples, 0.40%)</title><rect x="38.4242%" y="245" width="0.4039%" height="15" fill="rgb(233,36,39)" fg:x="8466" fg:w="89"/><text x="38.6742%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 0.19%)</title><rect x="38.6375%" y="229" width="0.1906%" height="15" fill="rgb(226,3,54)" fg:x="8513" fg:w="42"/><text x="38.8875%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.12%)</title><rect x="38.7101%" y="213" width="0.1180%" height="15" fill="rgb(245,192,40)" fg:x="8529" fg:w="26"/><text x="38.9601%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.03%)</title><rect x="38.8009%" y="197" width="0.0272%" height="15" fill="rgb(238,167,29)" fg:x="8549" fg:w="6"/><text x="39.0509%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (40 samples, 0.18%)</title><rect x="38.8281%" y="245" width="0.1815%" height="15" fill="rgb(232,182,51)" fg:x="8555" fg:w="40"/><text x="39.0781%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32 samples, 0.15%)</title><rect x="38.8644%" y="229" width="0.1452%" height="15" fill="rgb(231,60,39)" fg:x="8563" fg:w="32"/><text x="39.1144%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.12%)</title><rect x="38.8917%" y="213" width="0.1180%" height="15" fill="rgb(208,69,12)" fg:x="8569" fg:w="26"/><text x="39.1417%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.09%)</title><rect x="38.9234%" y="197" width="0.0862%" height="15" fill="rgb(235,93,37)" fg:x="8576" fg:w="19"/><text x="39.1734%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (617 samples, 2.80%)</title><rect x="43.2805%" y="149" width="2.8003%" height="15" fill="rgb(213,116,39)" fg:x="9536" fg:w="617"/><text x="43.5305%" y="159.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (74 samples, 0.34%)</title><rect x="45.7450%" y="133" width="0.3359%" height="15" fill="rgb(222,207,29)" fg:x="10079" fg:w="74"/><text x="45.9950%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.12%)</title><rect x="45.9629%" y="117" width="0.1180%" height="15" fill="rgb(206,96,30)" fg:x="10127" fg:w="26"/><text x="46.2129%" y="127.50"></text></g><g><title>__rdl_realloc (12 samples, 0.05%)</title><rect x="46.0264%" y="101" width="0.0545%" height="15" fill="rgb(218,138,4)" fg:x="10141" fg:w="12"/><text x="46.2764%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.04%)</title><rect x="46.1717%" y="133" width="0.0363%" height="15" fill="rgb(250,191,14)" fg:x="10173" fg:w="8"/><text x="46.4217%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30 samples, 0.14%)</title><rect x="46.0854%" y="149" width="0.1362%" height="15" fill="rgb(239,60,40)" fg:x="10154" fg:w="30"/><text x="46.3354%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="46.2080%" y="133" width="0.0136%" height="15" fill="rgb(206,27,48)" fg:x="10181" fg:w="3"/><text x="46.4580%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (26 samples, 0.12%)</title><rect x="46.2216%" y="149" width="0.1180%" height="15" fill="rgb(225,35,8)" fg:x="10184" fg:w="26"/><text x="46.4716%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (207 samples, 0.94%)</title><rect x="52.3578%" y="117" width="0.9395%" height="15" fill="rgb(250,213,24)" fg:x="11536" fg:w="207"/><text x="52.6078%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,914 samples, 13.23%)</title><rect x="40.2759%" y="165" width="13.2256%" height="15" fill="rgb(247,123,22)" fg:x="8874" fg:w="2914"/><text x="40.5259%" y="175.50">core::ops::function:..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,578 samples, 7.16%)</title><rect x="46.3396%" y="149" width="7.1620%" height="15" fill="rgb(231,138,38)" fg:x="10210" fg:w="1578"/><text x="46.5896%" y="159.50">xword_gen:..</text></g><g><title>core::hash::BuildHasher::hash_one (763 samples, 3.46%)</title><rect x="50.0386%" y="133" width="3.4630%" height="15" fill="rgb(231,145,46)" fg:x="11025" fg:w="763"/><text x="50.2886%" y="143.50">cor..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (45 samples, 0.20%)</title><rect x="53.2973%" y="117" width="0.2042%" height="15" fill="rgb(251,118,11)" fg:x="11743" fg:w="45"/><text x="53.5473%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,225 samples, 14.64%)</title><rect x="39.5952%" y="197" width="14.6371%" height="15" fill="rgb(217,147,25)" fg:x="8724" fg:w="3225"/><text x="39.8452%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,127 samples, 14.19%)</title><rect x="40.0399%" y="181" width="14.1923%" height="15" fill="rgb(247,81,37)" fg:x="8822" fg:w="3127"/><text x="40.2899%" y="191.50">&lt;core::iter::adapters:..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (161 samples, 0.73%)</title><rect x="53.5016%" y="165" width="0.7307%" height="15" fill="rgb(209,12,38)" fg:x="11788" fg:w="161"/><text x="53.7516%" y="175.50"></text></g><g><title>core::str::count::char_count_general_case (100 samples, 0.45%)</title><rect x="53.7784%" y="149" width="0.4539%" height="15" fill="rgb(227,1,9)" fg:x="11849" fg:w="100"/><text x="54.0284%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,355 samples, 15.23%)</title><rect x="39.0097%" y="229" width="15.2272%" height="15" fill="rgb(248,47,43)" fg:x="8595" fg:w="3355"/><text x="39.2597%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,236 samples, 14.69%)</title><rect x="39.5498%" y="213" width="14.6871%" height="15" fill="rgb(221,10,30)" fg:x="8714" fg:w="3236"/><text x="39.7998%" y="223.50">&lt;core::iter::adapters:..</text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.01%)</title><rect x="54.9267%" y="165" width="0.0136%" height="15" fill="rgb(210,229,1)" fg:x="12102" fg:w="3"/><text x="55.1767%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (7 samples, 0.03%)</title><rect x="55.0856%" y="133" width="0.0318%" height="15" fill="rgb(222,148,37)" fg:x="12137" fg:w="7"/><text x="55.3356%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (14 samples, 0.06%)</title><rect x="55.1990%" y="117" width="0.0635%" height="15" fill="rgb(234,67,33)" fg:x="12162" fg:w="14"/><text x="55.4490%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.01%)</title><rect x="55.3079%" y="101" width="0.0136%" height="15" fill="rgb(247,98,35)" fg:x="12186" fg:w="3"/><text x="55.5579%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (14 samples, 0.06%)</title><rect x="55.3352%" y="85" width="0.0635%" height="15" fill="rgb(247,138,52)" fg:x="12192" fg:w="14"/><text x="55.5852%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (7 samples, 0.03%)</title><rect x="55.4350%" y="69" width="0.0318%" height="15" fill="rgb(213,79,30)" fg:x="12214" fg:w="7"/><text x="55.6850%" y="79.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (3,632 samples, 16.48%)</title><rect x="39.0097%" y="245" width="16.4844%" height="15" fill="rgb(246,177,23)" fg:x="8595" fg:w="3632"/><text x="39.2597%" y="255.50">itertools::Itertools::sor..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (277 samples, 1.26%)</title><rect x="54.2368%" y="229" width="1.2572%" height="15" fill="rgb(230,62,27)" fg:x="11950" fg:w="277"/><text x="54.4868%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (221 samples, 1.00%)</title><rect x="54.4910%" y="213" width="1.0030%" height="15" fill="rgb(216,154,8)" fg:x="12006" fg:w="221"/><text x="54.7410%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (183 samples, 0.83%)</title><rect x="54.6635%" y="197" width="0.8306%" height="15" fill="rgb(244,35,45)" fg:x="12044" fg:w="183"/><text x="54.9135%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (151 samples, 0.69%)</title><rect x="54.8087%" y="181" width="0.6853%" height="15" fill="rgb(251,115,12)" fg:x="12076" fg:w="151"/><text x="55.0587%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (122 samples, 0.55%)</title><rect x="54.9403%" y="165" width="0.5537%" height="15" fill="rgb(240,54,50)" fg:x="12105" fg:w="122"/><text x="55.1903%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (101 samples, 0.46%)</title><rect x="55.0356%" y="149" width="0.4584%" height="15" fill="rgb(233,84,52)" fg:x="12126" fg:w="101"/><text x="55.2856%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (83 samples, 0.38%)</title><rect x="55.1173%" y="133" width="0.3767%" height="15" fill="rgb(207,117,47)" fg:x="12144" fg:w="83"/><text x="55.3673%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (51 samples, 0.23%)</title><rect x="55.2626%" y="117" width="0.2315%" height="15" fill="rgb(249,43,39)" fg:x="12176" fg:w="51"/><text x="55.5126%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (38 samples, 0.17%)</title><rect x="55.3216%" y="101" width="0.1725%" height="15" fill="rgb(209,38,44)" fg:x="12189" fg:w="38"/><text x="55.5716%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (21 samples, 0.10%)</title><rect x="55.3987%" y="85" width="0.0953%" height="15" fill="rgb(236,212,23)" fg:x="12206" fg:w="21"/><text x="55.6487%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.03%)</title><rect x="55.4668%" y="69" width="0.0272%" height="15" fill="rgb(242,79,21)" fg:x="12221" fg:w="6"/><text x="55.7168%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (4 samples, 0.02%)</title><rect x="55.4759%" y="53" width="0.0182%" height="15" fill="rgb(211,96,35)" fg:x="12223" fg:w="4"/><text x="55.7259%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (4 samples, 0.02%)</title><rect x="55.4759%" y="37" width="0.0182%" height="15" fill="rgb(253,215,40)" fg:x="12223" fg:w="4"/><text x="55.7259%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.16%)</title><rect x="56.1476%" y="213" width="0.1589%" height="15" fill="rgb(211,81,21)" fg:x="12371" fg:w="35"/><text x="56.3976%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (100 samples, 0.45%)</title><rect x="55.8798%" y="229" width="0.4539%" height="15" fill="rgb(208,190,38)" fg:x="12312" fg:w="100"/><text x="56.1298%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.03%)</title><rect x="56.3064%" y="213" width="0.0272%" height="15" fill="rgb(235,213,38)" fg:x="12406" fg:w="6"/><text x="56.5564%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (220 samples, 1.00%)</title><rect x="55.4986%" y="245" width="0.9985%" height="15" fill="rgb(237,122,38)" fg:x="12228" fg:w="220"/><text x="55.7486%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (34 samples, 0.15%)</title><rect x="56.3428%" y="229" width="0.1543%" height="15" fill="rgb(244,218,35)" fg:x="12414" fg:w="34"/><text x="56.5928%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.07%)</title><rect x="56.4245%" y="213" width="0.0726%" height="15" fill="rgb(240,68,47)" fg:x="12432" fg:w="16"/><text x="56.6745%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="56.4789%" y="197" width="0.0182%" height="15" fill="rgb(210,16,53)" fg:x="12444" fg:w="4"/><text x="56.7289%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.11%)</title><rect x="56.5969%" y="197" width="0.1135%" height="15" fill="rgb(235,124,12)" fg:x="12470" fg:w="25"/><text x="56.8469%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.21%)</title><rect x="56.5016%" y="229" width="0.2133%" height="15" fill="rgb(224,169,11)" fg:x="12449" fg:w="47"/><text x="56.7516%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.14%)</title><rect x="56.5742%" y="213" width="0.1407%" height="15" fill="rgb(250,166,2)" fg:x="12465" fg:w="31"/><text x="56.8242%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="56.8692%" y="197" width="0.0227%" height="15" fill="rgb(242,216,29)" fg:x="12530" fg:w="5"/><text x="57.1192%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.06%)</title><rect x="56.8375%" y="213" width="0.0590%" height="15" fill="rgb(230,116,27)" fg:x="12523" fg:w="13"/><text x="57.0875%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.06%)</title><rect x="56.9646%" y="181" width="0.0635%" height="15" fill="rgb(228,99,48)" fg:x="12551" fg:w="14"/><text x="57.2146%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (70 samples, 0.32%)</title><rect x="56.7149%" y="229" width="0.3177%" height="15" fill="rgb(253,11,6)" fg:x="12496" fg:w="70"/><text x="56.9649%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (30 samples, 0.14%)</title><rect x="56.8965%" y="213" width="0.1362%" height="15" fill="rgb(247,143,39)" fg:x="12536" fg:w="30"/><text x="57.1465%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.09%)</title><rect x="56.9419%" y="197" width="0.0908%" height="15" fill="rgb(236,97,10)" fg:x="12546" fg:w="20"/><text x="57.1919%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.11%)</title><rect x="57.4230%" y="197" width="0.1089%" height="15" fill="rgb(233,208,19)" fg:x="12652" fg:w="24"/><text x="57.6730%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (65 samples, 0.30%)</title><rect x="57.2732%" y="213" width="0.2950%" height="15" fill="rgb(216,164,2)" fg:x="12619" fg:w="65"/><text x="57.5232%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.04%)</title><rect x="57.5319%" y="197" width="0.0363%" height="15" fill="rgb(220,129,5)" fg:x="12676" fg:w="8"/><text x="57.7819%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (238 samples, 1.08%)</title><rect x="56.4971%" y="245" width="1.0802%" height="15" fill="rgb(242,17,10)" fg:x="12448" fg:w="238"/><text x="56.7471%" y="255.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (120 samples, 0.54%)</title><rect x="57.0326%" y="229" width="0.5446%" height="15" fill="rgb(242,107,0)" fg:x="12566" fg:w="120"/><text x="57.2826%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.09%)</title><rect x="57.5773%" y="229" width="0.0908%" height="15" fill="rgb(251,28,31)" fg:x="12686" fg:w="20"/><text x="57.8273%" y="239.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (18 samples, 0.08%)</title><rect x="57.5863%" y="213" width="0.0817%" height="15" fill="rgb(233,223,10)" fg:x="12688" fg:w="18"/><text x="57.8363%" y="223.50"></text></g><g><title>core::str::count::char_count_general_case (10 samples, 0.05%)</title><rect x="57.6227%" y="197" width="0.0454%" height="15" fill="rgb(215,21,27)" fg:x="12696" fg:w="10"/><text x="57.8727%" y="207.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (4 samples, 0.02%)</title><rect x="57.6680%" y="229" width="0.0182%" height="15" fill="rgb(232,23,21)" fg:x="12706" fg:w="4"/><text x="57.9180%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.02%)</title><rect x="57.6862%" y="229" width="0.0227%" height="15" fill="rgb(244,5,23)" fg:x="12710" fg:w="5"/><text x="57.9362%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="57.6953%" y="213" width="0.0136%" height="15" fill="rgb(226,81,46)" fg:x="12712" fg:w="3"/><text x="57.9453%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="57.6953%" y="197" width="0.0136%" height="15" fill="rgb(247,70,30)" fg:x="12712" fg:w="3"/><text x="57.9453%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.07%)</title><rect x="58.1128%" y="117" width="0.0681%" height="15" fill="rgb(212,68,19)" fg:x="12804" fg:w="15"/><text x="58.3628%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.20%)</title><rect x="57.9994%" y="133" width="0.2042%" height="15" fill="rgb(240,187,13)" fg:x="12779" fg:w="45"/><text x="58.2494%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.02%)</title><rect x="58.1809%" y="117" width="0.0227%" height="15" fill="rgb(223,113,26)" fg:x="12819" fg:w="5"/><text x="58.4309%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (83 samples, 0.38%)</title><rect x="57.8360%" y="149" width="0.3767%" height="15" fill="rgb(206,192,2)" fg:x="12743" fg:w="83"/><text x="58.0860%" y="159.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (321 samples, 1.46%)</title><rect x="57.7089%" y="229" width="1.4569%" height="15" fill="rgb(241,108,4)" fg:x="12715" fg:w="321"/><text x="57.9589%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (321 samples, 1.46%)</title><rect x="57.7089%" y="213" width="1.4569%" height="15" fill="rgb(247,173,49)" fg:x="12715" fg:w="321"/><text x="57.9589%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (320 samples, 1.45%)</title><rect x="57.7134%" y="197" width="1.4524%" height="15" fill="rgb(224,114,35)" fg:x="12716" fg:w="320"/><text x="57.9634%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (320 samples, 1.45%)</title><rect x="57.7134%" y="181" width="1.4524%" height="15" fill="rgb(245,159,27)" fg:x="12716" fg:w="320"/><text x="57.9634%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (320 samples, 1.45%)</title><rect x="57.7134%" y="165" width="1.4524%" height="15" fill="rgb(245,172,44)" fg:x="12716" fg:w="320"/><text x="57.9634%" y="175.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (210 samples, 0.95%)</title><rect x="58.2127%" y="149" width="0.9531%" height="15" fill="rgb(236,23,11)" fg:x="12826" fg:w="210"/><text x="58.4627%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (150 samples, 0.68%)</title><rect x="58.4850%" y="133" width="0.6808%" height="15" fill="rgb(205,117,38)" fg:x="12886" fg:w="150"/><text x="58.7350%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="59.1885%" y="197" width="0.0227%" height="15" fill="rgb(237,72,25)" fg:x="13041" fg:w="5"/><text x="59.4385%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.04%)</title><rect x="59.1794%" y="213" width="0.0363%" height="15" fill="rgb(244,70,9)" fg:x="13039" fg:w="8"/><text x="59.4294%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (13 samples, 0.06%)</title><rect x="59.1658%" y="229" width="0.0590%" height="15" fill="rgb(217,125,39)" fg:x="13036" fg:w="13"/><text x="59.4158%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="59.2248%" y="213" width="0.0136%" height="15" fill="rgb(235,36,10)" fg:x="13049" fg:w="3"/><text x="59.4748%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.03%)</title><rect x="59.2384%" y="213" width="0.0318%" height="15" fill="rgb(251,123,47)" fg:x="13052" fg:w="7"/><text x="59.4884%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.02%)</title><rect x="59.2475%" y="197" width="0.0227%" height="15" fill="rgb(221,13,13)" fg:x="13054" fg:w="5"/><text x="59.4975%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="59.2566%" y="181" width="0.0136%" height="15" fill="rgb(238,131,9)" fg:x="13056" fg:w="3"/><text x="59.5066%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="59.3156%" y="197" width="0.0227%" height="15" fill="rgb(211,50,8)" fg:x="13069" fg:w="5"/><text x="59.5656%" y="207.50"></text></g><g><title>_start (13,075 samples, 59.34%)</title><rect x="0.0000%" y="405" width="59.3428%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="415.50">_start</text></g><g><title>__libc_start_main_impl (13,075 samples, 59.34%)</title><rect x="0.0000%" y="389" width="59.3428%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="399.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (13,075 samples, 59.34%)</title><rect x="0.0000%" y="373" width="59.3428%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="383.50">__libc_start_call_main</text></g><g><title>main (13,075 samples, 59.34%)</title><rect x="0.0000%" y="357" width="59.3428%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (13,075 samples, 59.34%)</title><rect x="0.0000%" y="341" width="59.3428%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (13,075 samples, 59.34%)</title><rect x="0.0000%" y="325" width="59.3428%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (13,075 samples, 59.34%)</title><rect x="0.0000%" y="309" width="59.3428%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (13,075 samples, 59.34%)</title><rect x="0.0000%" y="293" width="59.3428%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="303.50">xword_gen::main</text></g><g><title>util::time::time_fn (13,075 samples, 59.34%)</title><rect x="0.0000%" y="277" width="59.3428%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="287.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (13,075 samples, 59.34%)</title><rect x="0.0000%" y="261" width="59.3428%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="13075"/><text x="0.2500%" y="271.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (389 samples, 1.77%)</title><rect x="57.5773%" y="245" width="1.7655%" height="15" fill="rgb(224,123,36)" fg:x="12686" fg:w="389"/><text x="57.8273%" y="255.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (26 samples, 0.12%)</title><rect x="59.2248%" y="229" width="0.1180%" height="15" fill="rgb(240,125,3)" fg:x="13049" fg:w="26"/><text x="59.4748%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (16 samples, 0.07%)</title><rect x="59.2702%" y="213" width="0.0726%" height="15" fill="rgb(205,98,50)" fg:x="13059" fg:w="16"/><text x="59.5202%" y="223.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (922 samples, 4.18%)</title><rect x="59.3428%" y="325" width="4.1846%" height="15" fill="rgb(205,185,37)" fg:x="13075" fg:w="922"/><text x="59.5928%" y="335.50">&lt;dlx:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (920 samples, 4.18%)</title><rect x="59.3519%" y="309" width="4.1756%" height="15" fill="rgb(238,207,15)" fg:x="13077" fg:w="920"/><text x="59.6019%" y="319.50">dlx::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.02%)</title><rect x="63.5864%" y="309" width="0.0227%" height="15" fill="rgb(213,199,42)" fg:x="14010" fg:w="5"/><text x="63.8364%" y="319.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (3,966 samples, 18.00%)</title><rect x="63.6091%" y="309" width="18.0003%" height="15" fill="rgb(235,201,11)" fg:x="14015" fg:w="3966"/><text x="63.8591%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::cover_re..</text></g><g><title>all (22,033 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="22033"/><text x="0.2500%" y="447.50"></text></g><g><title>xword_gen (22,033 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="22033"/><text x="0.2500%" y="431.50">xword_gen</text></g><g><title>clone3 (8,958 samples, 40.66%)</title><rect x="59.3428%" y="405" width="40.6572%" height="15" fill="rgb(243,32,47)" fg:x="13075" fg:w="8958"/><text x="59.5928%" y="415.50">clone3</text></g><g><title>start_thread (8,958 samples, 40.66%)</title><rect x="59.3428%" y="389" width="40.6572%" height="15" fill="rgb(247,202,23)" fg:x="13075" fg:w="8958"/><text x="59.5928%" y="399.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (8,958 samples, 40.66%)</title><rect x="59.3428%" y="373" width="40.6572%" height="15" fill="rgb(219,102,11)" fg:x="13075" fg:w="8958"/><text x="59.5928%" y="383.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,958 samples, 40.66%)</title><rect x="59.3428%" y="357" width="40.6572%" height="15" fill="rgb(243,110,44)" fg:x="13075" fg:w="8958"/><text x="59.5928%" y="367.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8,958 samples, 40.66%)</title><rect x="59.3428%" y="341" width="40.6572%" height="15" fill="rgb(222,74,54)" fg:x="13075" fg:w="8958"/><text x="59.5928%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,036 samples, 36.47%)</title><rect x="63.5274%" y="325" width="36.4726%" height="15" fill="rgb(216,99,12)" fg:x="13997" fg:w="8036"/><text x="63.7774%" y="335.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (4,052 samples, 18.39%)</title><rect x="81.6094%" y="309" width="18.3906%" height="15" fill="rgb(226,22,26)" fg:x="17981" fg:w="4052"/><text x="81.8594%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::uncover_r..</text></g></svg></svg>