<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="26798"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (89 samples, 0.33%)</title><rect x="0.0075%" y="229" width="0.3321%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="89"/><text x="0.2575%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (557 samples, 2.08%)</title><rect x="0.3396%" y="229" width="2.0785%" height="15" fill="rgb(217,0,24)" fg:x="91" fg:w="557"/><text x="0.5896%" y="239.50">&lt;..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (498 samples, 1.86%)</title><rect x="0.5597%" y="213" width="1.8583%" height="15" fill="rgb(221,193,54)" fg:x="150" fg:w="498"/><text x="0.8097%" y="223.50">x..</text></g><g><title>core::str::count::char_count_general_case (294 samples, 1.10%)</title><rect x="1.3210%" y="197" width="1.0971%" height="15" fill="rgb(248,212,6)" fg:x="354" fg:w="294"/><text x="1.5710%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.03%)</title><rect x="2.8584%" y="117" width="0.0299%" height="15" fill="rgb(208,68,35)" fg:x="766" fg:w="8"/><text x="3.1084%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="2.8771%" y="101" width="0.0112%" height="15" fill="rgb(232,128,0)" fg:x="771" fg:w="3"/><text x="3.1271%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="2.9629%" y="85" width="0.0112%" height="15" fill="rgb(207,160,47)" fg:x="794" fg:w="3"/><text x="3.2129%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (53 samples, 0.20%)</title><rect x="2.7801%" y="181" width="0.1978%" height="15" fill="rgb(228,23,34)" fg:x="745" fg:w="53"/><text x="3.0301%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.20%)</title><rect x="2.7801%" y="165" width="0.1978%" height="15" fill="rgb(218,30,26)" fg:x="745" fg:w="53"/><text x="3.0301%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.20%)</title><rect x="2.7801%" y="149" width="0.1978%" height="15" fill="rgb(220,122,19)" fg:x="745" fg:w="53"/><text x="3.0301%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.18%)</title><rect x="2.7987%" y="133" width="0.1791%" height="15" fill="rgb(250,228,42)" fg:x="750" fg:w="48"/><text x="3.0487%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.09%)</title><rect x="2.8883%" y="117" width="0.0896%" height="15" fill="rgb(240,193,28)" fg:x="774" fg:w="24"/><text x="3.1383%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="2.9368%" y="101" width="0.0410%" height="15" fill="rgb(216,20,37)" fg:x="787" fg:w="11"/><text x="3.1868%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (959 samples, 3.58%)</title><rect x="29.1925%" y="149" width="3.5786%" height="15" fill="rgb(206,188,39)" fg:x="7823" fg:w="959"/><text x="29.4425%" y="159.50">&lt;cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,188 samples, 30.55%)</title><rect x="2.9778%" y="181" width="30.5545%" height="15" fill="rgb(217,207,13)" fg:x="798" fg:w="8188"/><text x="3.2278%" y="191.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::it..</text></g><g><title>core::hash::BuildHasher::hash_one (2,025 samples, 7.56%)</title><rect x="25.9758%" y="165" width="7.5565%" height="15" fill="rgb(231,73,38)" fg:x="6961" fg:w="2025"/><text x="26.2258%" y="175.50">core::hash..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (204 samples, 0.76%)</title><rect x="32.7711%" y="149" width="0.7613%" height="15" fill="rgb(225,20,46)" fg:x="8782" fg:w="204"/><text x="33.0211%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition (6 samples, 0.02%)</title><rect x="33.5324%" y="181" width="0.0224%" height="15" fill="rgb(210,31,41)" fg:x="8986" fg:w="6"/><text x="33.7824%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.14%)</title><rect x="35.2788%" y="149" width="0.1381%" height="15" fill="rgb(221,200,47)" fg:x="9454" fg:w="37"/><text x="35.5288%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (98 samples, 0.37%)</title><rect x="35.0810%" y="165" width="0.3657%" height="15" fill="rgb(226,26,5)" fg:x="9401" fg:w="98"/><text x="35.3310%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.03%)</title><rect x="35.4168%" y="149" width="0.0299%" height="15" fill="rgb(249,33,26)" fg:x="9491" fg:w="8"/><text x="35.6668%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (59 samples, 0.22%)</title><rect x="35.8086%" y="133" width="0.2202%" height="15" fill="rgb(235,183,28)" fg:x="9596" fg:w="59"/><text x="36.0586%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,014 samples, 33.64%)</title><rect x="2.4218%" y="213" width="33.6368%" height="15" fill="rgb(221,5,38)" fg:x="649" fg:w="9014"/><text x="2.6718%" y="223.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::tra..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (9,014 samples, 33.64%)</title><rect x="2.4218%" y="197" width="33.6368%" height="15" fill="rgb(247,18,42)" fg:x="649" fg:w="9014"/><text x="2.6718%" y="207.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (671 samples, 2.50%)</title><rect x="33.5547%" y="181" width="2.5039%" height="15" fill="rgb(241,131,45)" fg:x="8992" fg:w="671"/><text x="33.8047%" y="191.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (164 samples, 0.61%)</title><rect x="35.4467%" y="165" width="0.6120%" height="15" fill="rgb(249,31,29)" fg:x="9499" fg:w="164"/><text x="35.6967%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (103 samples, 0.38%)</title><rect x="35.6743%" y="149" width="0.3844%" height="15" fill="rgb(225,111,53)" fg:x="9560" fg:w="103"/><text x="35.9243%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.03%)</title><rect x="36.0288%" y="133" width="0.0299%" height="15" fill="rgb(238,160,17)" fg:x="9655" fg:w="8"/><text x="36.2788%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9,064 samples, 33.82%)</title><rect x="2.4218%" y="229" width="33.8234%" height="15" fill="rgb(214,148,48)" fg:x="649" fg:w="9064"/><text x="2.6718%" y="239.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::i..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (50 samples, 0.19%)</title><rect x="36.0587%" y="213" width="0.1866%" height="15" fill="rgb(232,36,49)" fg:x="9663" fg:w="50"/><text x="36.3087%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (49 samples, 0.18%)</title><rect x="36.0624%" y="197" width="0.1828%" height="15" fill="rgb(209,103,24)" fg:x="9664" fg:w="49"/><text x="36.3124%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.06%)</title><rect x="36.1893%" y="181" width="0.0560%" height="15" fill="rgb(229,88,8)" fg:x="9698" fg:w="15"/><text x="36.4393%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="36.2042%" y="165" width="0.0410%" height="15" fill="rgb(213,181,19)" fg:x="9702" fg:w="11"/><text x="36.4542%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.06%)</title><rect x="36.3684%" y="213" width="0.0560%" height="15" fill="rgb(254,191,54)" fg:x="9746" fg:w="15"/><text x="36.6184%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="36.3945%" y="197" width="0.0299%" height="15" fill="rgb(241,83,37)" fg:x="9753" fg:w="8"/><text x="36.6445%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="36.5662%" y="181" width="0.0112%" height="15" fill="rgb(233,36,39)" fg:x="9799" fg:w="3"/><text x="36.8162%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (91 samples, 0.34%)</title><rect x="36.2490%" y="229" width="0.3396%" height="15" fill="rgb(226,3,54)" fg:x="9714" fg:w="91"/><text x="36.4990%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (44 samples, 0.16%)</title><rect x="36.4244%" y="213" width="0.1642%" height="15" fill="rgb(245,192,40)" fg:x="9761" fg:w="44"/><text x="36.6744%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.07%)</title><rect x="36.5177%" y="197" width="0.0709%" height="15" fill="rgb(238,167,29)" fg:x="9786" fg:w="19"/><text x="36.7677%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="36.5774%" y="181" width="0.0112%" height="15" fill="rgb(232,182,51)" fg:x="9802" fg:w="3"/><text x="36.8274%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (46 samples, 0.17%)</title><rect x="36.5886%" y="229" width="0.1717%" height="15" fill="rgb(231,60,39)" fg:x="9805" fg:w="46"/><text x="36.8386%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (43 samples, 0.16%)</title><rect x="36.5997%" y="213" width="0.1605%" height="15" fill="rgb(208,69,12)" fg:x="9808" fg:w="43"/><text x="36.8497%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (28 samples, 0.10%)</title><rect x="36.6557%" y="197" width="0.1045%" height="15" fill="rgb(235,93,37)" fg:x="9823" fg:w="28"/><text x="36.9057%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.09%)</title><rect x="36.6744%" y="181" width="0.0858%" height="15" fill="rgb(213,116,39)" fg:x="9828" fg:w="23"/><text x="36.9244%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (729 samples, 2.72%)</title><rect x="40.7381%" y="133" width="2.7204%" height="15" fill="rgb(222,207,29)" fg:x="10917" fg:w="729"/><text x="40.9881%" y="143.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (99 samples, 0.37%)</title><rect x="43.0890%" y="117" width="0.3694%" height="15" fill="rgb(206,96,30)" fg:x="11547" fg:w="99"/><text x="43.3390%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.09%)</title><rect x="43.3726%" y="101" width="0.0858%" height="15" fill="rgb(218,138,4)" fg:x="11623" fg:w="23"/><text x="43.6226%" y="111.50"></text></g><g><title>__rdl_realloc (7 samples, 0.03%)</title><rect x="43.4323%" y="85" width="0.0261%" height="15" fill="rgb(250,191,14)" fg:x="11639" fg:w="7"/><text x="43.6823%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.04%)</title><rect x="43.5592%" y="117" width="0.0448%" height="15" fill="rgb(239,60,40)" fg:x="11673" fg:w="12"/><text x="43.8092%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.15%)</title><rect x="43.4622%" y="133" width="0.1530%" height="15" fill="rgb(206,27,48)" fg:x="11647" fg:w="41"/><text x="43.7122%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="43.6040%" y="117" width="0.0112%" height="15" fill="rgb(225,35,8)" fg:x="11685" fg:w="3"/><text x="43.8540%" y="127.50"></text></g><g><title>core::str::count::char_count_general_case (31 samples, 0.12%)</title><rect x="43.6152%" y="133" width="0.1157%" height="15" fill="rgb(250,213,24)" fg:x="11688" fg:w="31"/><text x="43.8652%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (225 samples, 0.84%)</title><rect x="49.3358%" y="101" width="0.8396%" height="15" fill="rgb(247,123,22)" fg:x="13221" fg:w="225"/><text x="49.5858%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,354 samples, 12.52%)</title><rect x="37.9357%" y="149" width="12.5159%" height="15" fill="rgb(231,138,38)" fg:x="10166" fg:w="3354"/><text x="38.1857%" y="159.50">core::ops::function..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,801 samples, 6.72%)</title><rect x="43.7309%" y="133" width="6.7207%" height="15" fill="rgb(231,145,46)" fg:x="11719" fg:w="1801"/><text x="43.9809%" y="143.50">xword_gen..</text></g><g><title>core::hash::BuildHasher::hash_one (863 samples, 3.22%)</title><rect x="47.2311%" y="117" width="3.2204%" height="15" fill="rgb(251,118,11)" fg:x="12657" fg:w="863"/><text x="47.4811%" y="127.50">cor..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (74 samples, 0.28%)</title><rect x="50.1754%" y="101" width="0.2761%" height="15" fill="rgb(217,147,25)" fg:x="13446" fg:w="74"/><text x="50.4254%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,691 samples, 13.77%)</title><rect x="37.2826%" y="181" width="13.7734%" height="15" fill="rgb(247,81,37)" fg:x="9991" fg:w="3691"/><text x="37.5326%" y="191.50">&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,575 samples, 13.34%)</title><rect x="37.7155%" y="165" width="13.3405%" height="15" fill="rgb(209,12,38)" fg:x="10107" fg:w="3575"/><text x="37.9655%" y="175.50">&lt;core::iter::adapter..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (162 samples, 0.60%)</title><rect x="50.4515%" y="149" width="0.6045%" height="15" fill="rgb(227,1,9)" fg:x="13520" fg:w="162"/><text x="50.7015%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (89 samples, 0.33%)</title><rect x="50.7239%" y="133" width="0.3321%" height="15" fill="rgb(248,47,43)" fg:x="13593" fg:w="89"/><text x="50.9739%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,834 samples, 14.31%)</title><rect x="36.7602%" y="213" width="14.3070%" height="15" fill="rgb(221,10,30)" fg:x="9851" fg:w="3834"/><text x="37.0102%" y="223.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,699 samples, 13.80%)</title><rect x="37.2640%" y="197" width="13.8033%" height="15" fill="rgb(210,229,1)" fg:x="9986" fg:w="3699"/><text x="37.5140%" y="207.50">&lt;core::iter::adapters..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="51.0560%" y="181" width="0.0112%" height="15" fill="rgb(222,148,37)" fg:x="13682" fg:w="3"/><text x="51.3060%" y="191.50"></text></g><g><title>util::union_find::UnionFind&lt;K,M&gt;::get_root (3 samples, 0.01%)</title><rect x="51.0560%" y="165" width="0.0112%" height="15" fill="rgb(234,67,33)" fg:x="13682" fg:w="3"/><text x="51.3060%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.01%)</title><rect x="51.6158%" y="149" width="0.0112%" height="15" fill="rgb(247,98,35)" fg:x="13832" fg:w="3"/><text x="51.8658%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (7 samples, 0.03%)</title><rect x="51.7315%" y="133" width="0.0261%" height="15" fill="rgb(247,138,52)" fg:x="13863" fg:w="7"/><text x="51.9815%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.03%)</title><rect x="51.8248%" y="117" width="0.0299%" height="15" fill="rgb(213,79,30)" fg:x="13888" fg:w="8"/><text x="52.0748%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (7 samples, 0.03%)</title><rect x="51.9218%" y="101" width="0.0261%" height="15" fill="rgb(246,177,23)" fg:x="13914" fg:w="7"/><text x="52.1718%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (7 samples, 0.03%)</title><rect x="52.0039%" y="85" width="0.0261%" height="15" fill="rgb(230,62,27)" fg:x="13936" fg:w="7"/><text x="52.2539%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.05%)</title><rect x="52.0636%" y="69" width="0.0485%" height="15" fill="rgb(216,154,8)" fg:x="13952" fg:w="13"/><text x="52.3136%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (5 samples, 0.02%)</title><rect x="52.1494%" y="53" width="0.0187%" height="15" fill="rgb(244,35,45)" fg:x="13975" fg:w="5"/><text x="52.3994%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (5 samples, 0.02%)</title><rect x="52.1755%" y="37" width="0.0187%" height="15" fill="rgb(251,115,12)" fg:x="13982" fg:w="5"/><text x="52.4255%" y="47.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (4,139 samples, 15.45%)</title><rect x="36.7602%" y="229" width="15.4452%" height="15" fill="rgb(240,54,50)" fg:x="9851" fg:w="4139"/><text x="37.0102%" y="239.50">itertools::Itertools::so..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (305 samples, 1.14%)</title><rect x="51.0672%" y="213" width="1.1381%" height="15" fill="rgb(233,84,52)" fg:x="13685" fg:w="305"/><text x="51.3172%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (244 samples, 0.91%)</title><rect x="51.2949%" y="197" width="0.9105%" height="15" fill="rgb(207,117,47)" fg:x="13746" fg:w="244"/><text x="51.5449%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (212 samples, 0.79%)</title><rect x="51.4143%" y="181" width="0.7911%" height="15" fill="rgb(249,43,39)" fg:x="13778" fg:w="212"/><text x="51.6643%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (183 samples, 0.68%)</title><rect x="51.5225%" y="165" width="0.6829%" height="15" fill="rgb(209,38,44)" fg:x="13807" fg:w="183"/><text x="51.7725%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (155 samples, 0.58%)</title><rect x="51.6270%" y="149" width="0.5784%" height="15" fill="rgb(236,212,23)" fg:x="13835" fg:w="155"/><text x="51.8770%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (120 samples, 0.45%)</title><rect x="51.7576%" y="133" width="0.4478%" height="15" fill="rgb(242,79,21)" fg:x="13870" fg:w="120"/><text x="52.0076%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (94 samples, 0.35%)</title><rect x="51.8546%" y="117" width="0.3508%" height="15" fill="rgb(211,96,35)" fg:x="13896" fg:w="94"/><text x="52.1046%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (69 samples, 0.26%)</title><rect x="51.9479%" y="101" width="0.2575%" height="15" fill="rgb(253,215,40)" fg:x="13921" fg:w="69"/><text x="52.1979%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (47 samples, 0.18%)</title><rect x="52.0300%" y="85" width="0.1754%" height="15" fill="rgb(211,81,21)" fg:x="13943" fg:w="47"/><text x="52.2800%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (25 samples, 0.09%)</title><rect x="52.1121%" y="69" width="0.0933%" height="15" fill="rgb(208,190,38)" fg:x="13965" fg:w="25"/><text x="52.3621%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (10 samples, 0.04%)</title><rect x="52.1681%" y="53" width="0.0373%" height="15" fill="rgb(235,213,38)" fg:x="13980" fg:w="10"/><text x="52.4181%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="52.1942%" y="37" width="0.0112%" height="15" fill="rgb(237,122,38)" fg:x="13987" fg:w="3"/><text x="52.4442%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40 samples, 0.15%)</title><rect x="52.8248%" y="197" width="0.1493%" height="15" fill="rgb(244,218,35)" fg:x="14156" fg:w="40"/><text x="53.0748%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (118 samples, 0.44%)</title><rect x="52.5711%" y="213" width="0.4403%" height="15" fill="rgb(240,68,47)" fg:x="14088" fg:w="118"/><text x="52.8211%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.04%)</title><rect x="52.9741%" y="197" width="0.0373%" height="15" fill="rgb(210,16,53)" fg:x="14196" fg:w="10"/><text x="53.2241%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.02%)</title><rect x="53.0114%" y="213" width="0.0224%" height="15" fill="rgb(235,124,12)" fg:x="14206" fg:w="6"/><text x="53.2614%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="53.1420%" y="181" width="0.0373%" height="15" fill="rgb(224,169,11)" fg:x="14241" fg:w="10"/><text x="53.3920%" y="191.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (264 samples, 0.99%)</title><rect x="52.2091%" y="229" width="0.9851%" height="15" fill="rgb(250,166,2)" fg:x="13991" fg:w="264"/><text x="52.4591%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (43 samples, 0.16%)</title><rect x="53.0338%" y="213" width="0.1605%" height="15" fill="rgb(242,216,29)" fg:x="14212" fg:w="43"/><text x="53.2838%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.09%)</title><rect x="53.1047%" y="197" width="0.0896%" height="15" fill="rgb(230,116,27)" fg:x="14231" fg:w="24"/><text x="53.3547%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="53.1793%" y="181" width="0.0149%" height="15" fill="rgb(228,99,48)" fg:x="14251" fg:w="4"/><text x="53.4293%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.06%)</title><rect x="53.2652%" y="181" width="0.0597%" height="15" fill="rgb(253,11,6)" fg:x="14274" fg:w="16"/><text x="53.5152%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.13%)</title><rect x="53.1943%" y="213" width="0.1343%" height="15" fill="rgb(247,143,39)" fg:x="14255" fg:w="36"/><text x="53.4443%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.09%)</title><rect x="53.2353%" y="197" width="0.0933%" height="15" fill="rgb(236,97,10)" fg:x="14266" fg:w="25"/><text x="53.4853%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="53.4965%" y="181" width="0.0149%" height="15" fill="rgb(233,208,19)" fg:x="14336" fg:w="4"/><text x="53.7465%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.03%)</title><rect x="53.4853%" y="197" width="0.0336%" height="15" fill="rgb(216,164,2)" fg:x="14333" fg:w="9"/><text x="53.7353%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="53.5749%" y="165" width="0.0522%" height="15" fill="rgb(220,129,5)" fg:x="14357" fg:w="14"/><text x="53.8249%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (81 samples, 0.30%)</title><rect x="53.3286%" y="213" width="0.3023%" height="15" fill="rgb(242,17,10)" fg:x="14291" fg:w="81"/><text x="53.5786%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (30 samples, 0.11%)</title><rect x="53.5189%" y="197" width="0.1119%" height="15" fill="rgb(242,107,0)" fg:x="14342" fg:w="30"/><text x="53.7689%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.07%)</title><rect x="53.5600%" y="181" width="0.0709%" height="15" fill="rgb(251,28,31)" fg:x="14353" fg:w="19"/><text x="53.8100%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.13%)</title><rect x="54.0824%" y="181" width="0.1306%" height="15" fill="rgb(233,223,10)" fg:x="14493" fg:w="35"/><text x="54.3324%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (86 samples, 0.32%)</title><rect x="53.9182%" y="197" width="0.3209%" height="15" fill="rgb(215,21,27)" fg:x="14449" fg:w="86"/><text x="54.1682%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.03%)</title><rect x="54.2130%" y="181" width="0.0261%" height="15" fill="rgb(232,23,21)" fg:x="14528" fg:w="7"/><text x="54.4630%" y="191.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (283 samples, 1.06%)</title><rect x="53.1943%" y="229" width="1.0560%" height="15" fill="rgb(244,5,23)" fg:x="14255" fg:w="283"/><text x="53.4443%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (166 samples, 0.62%)</title><rect x="53.6309%" y="213" width="0.6194%" height="15" fill="rgb(226,81,46)" fg:x="14372" fg:w="166"/><text x="53.8809%" y="223.50"></text></g><g><title>core::str::count::char_count_general_case (3 samples, 0.01%)</title><rect x="54.2391%" y="197" width="0.0112%" height="15" fill="rgb(247,70,30)" fg:x="14535" fg:w="3"/><text x="54.4891%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.09%)</title><rect x="54.2503%" y="213" width="0.0896%" height="15" fill="rgb(212,68,19)" fg:x="14538" fg:w="24"/><text x="54.5003%" y="223.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (22 samples, 0.08%)</title><rect x="54.2578%" y="197" width="0.0821%" height="15" fill="rgb(240,187,13)" fg:x="14540" fg:w="22"/><text x="54.5078%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (16 samples, 0.06%)</title><rect x="54.2802%" y="181" width="0.0597%" height="15" fill="rgb(223,113,26)" fg:x="14546" fg:w="16"/><text x="54.5302%" y="191.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (4 samples, 0.01%)</title><rect x="54.3399%" y="213" width="0.0149%" height="15" fill="rgb(206,192,2)" fg:x="14562" fg:w="4"/><text x="54.5899%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="54.3548%" y="213" width="0.0149%" height="15" fill="rgb(241,108,4)" fg:x="14566" fg:w="4"/><text x="54.6048%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="54.3585%" y="197" width="0.0112%" height="15" fill="rgb(247,173,49)" fg:x="14567" fg:w="3"/><text x="54.6085%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.05%)</title><rect x="54.7615%" y="101" width="0.0485%" height="15" fill="rgb(224,114,35)" fg:x="14675" fg:w="13"/><text x="55.0115%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (105 samples, 0.39%)</title><rect x="54.4481%" y="133" width="0.3918%" height="15" fill="rgb(245,159,27)" fg:x="14591" fg:w="105"/><text x="54.6981%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.17%)</title><rect x="54.6720%" y="117" width="0.1679%" height="15" fill="rgb(245,172,44)" fg:x="14651" fg:w="45"/><text x="54.9220%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.03%)</title><rect x="54.8101%" y="101" width="0.0299%" height="15" fill="rgb(236,23,11)" fg:x="14688" fg:w="8"/><text x="55.0601%" y="111.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (327 samples, 1.22%)</title><rect x="54.3697%" y="213" width="1.2202%" height="15" fill="rgb(205,117,38)" fg:x="14570" fg:w="327"/><text x="54.6197%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (327 samples, 1.22%)</title><rect x="54.3697%" y="197" width="1.2202%" height="15" fill="rgb(237,72,25)" fg:x="14570" fg:w="327"/><text x="54.6197%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (327 samples, 1.22%)</title><rect x="54.3697%" y="181" width="1.2202%" height="15" fill="rgb(244,70,9)" fg:x="14570" fg:w="327"/><text x="54.6197%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (327 samples, 1.22%)</title><rect x="54.3697%" y="165" width="1.2202%" height="15" fill="rgb(217,125,39)" fg:x="14570" fg:w="327"/><text x="54.6197%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (327 samples, 1.22%)</title><rect x="54.3697%" y="149" width="1.2202%" height="15" fill="rgb(235,36,10)" fg:x="14570" fg:w="327"/><text x="54.6197%" y="159.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (201 samples, 0.75%)</title><rect x="54.8399%" y="133" width="0.7501%" height="15" fill="rgb(251,123,47)" fg:x="14696" fg:w="201"/><text x="55.0899%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (109 samples, 0.41%)</title><rect x="55.1832%" y="117" width="0.4067%" height="15" fill="rgb(221,13,13)" fg:x="14788" fg:w="109"/><text x="55.4332%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="55.6086%" y="197" width="0.0187%" height="15" fill="rgb(238,131,9)" fg:x="14902" fg:w="5"/><text x="55.8586%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (15 samples, 0.06%)</title><rect x="55.5900%" y="213" width="0.0560%" height="15" fill="rgb(211,50,8)" fg:x="14897" fg:w="15"/><text x="55.8400%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.02%)</title><rect x="55.6273%" y="197" width="0.0187%" height="15" fill="rgb(245,182,24)" fg:x="14907" fg:w="5"/><text x="55.8773%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.01%)</title><rect x="55.6310%" y="181" width="0.0149%" height="15" fill="rgb(242,14,37)" fg:x="14908" fg:w="4"/><text x="55.8810%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.03%)</title><rect x="55.6459%" y="197" width="0.0261%" height="15" fill="rgb(246,228,12)" fg:x="14912" fg:w="7"/><text x="55.8959%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.03%)</title><rect x="55.6459%" y="181" width="0.0261%" height="15" fill="rgb(213,55,15)" fg:x="14912" fg:w="7"/><text x="55.8959%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="55.6497%" y="165" width="0.0224%" height="15" fill="rgb(209,9,3)" fg:x="14913" fg:w="6"/><text x="55.8997%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="55.6721%" y="197" width="0.0224%" height="15" fill="rgb(230,59,30)" fg:x="14919" fg:w="6"/><text x="55.9221%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="55.6833%" y="181" width="0.0112%" height="15" fill="rgb(209,121,21)" fg:x="14922" fg:w="3"/><text x="55.9333%" y="191.50"></text></g><g><title>_start (14,944 samples, 55.77%)</title><rect x="0.0000%" y="389" width="55.7654%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="399.50">_start</text></g><g><title>__libc_start_main_impl (14,944 samples, 55.77%)</title><rect x="0.0000%" y="373" width="55.7654%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="383.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (14,944 samples, 55.77%)</title><rect x="0.0000%" y="357" width="55.7654%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="367.50">__libc_start_call_main</text></g><g><title>main (14,944 samples, 55.77%)</title><rect x="0.0000%" y="341" width="55.7654%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (14,944 samples, 55.77%)</title><rect x="0.0000%" y="325" width="55.7654%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (14,944 samples, 55.77%)</title><rect x="0.0000%" y="309" width="55.7654%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (14,944 samples, 55.77%)</title><rect x="0.0000%" y="293" width="55.7654%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (14,944 samples, 55.77%)</title><rect x="0.0000%" y="277" width="55.7654%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="287.50">xword_gen::main</text></g><g><title>util::time::time_fn (14,944 samples, 55.77%)</title><rect x="0.0000%" y="261" width="55.7654%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="271.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (14,944 samples, 55.77%)</title><rect x="0.0000%" y="245" width="55.7654%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="14944"/><text x="0.2500%" y="255.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (406 samples, 1.52%)</title><rect x="54.2503%" y="229" width="1.5150%" height="15" fill="rgb(207,46,11)" fg:x="14538" fg:w="406"/><text x="54.5003%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (32 samples, 0.12%)</title><rect x="55.6459%" y="213" width="0.1194%" height="15" fill="rgb(241,35,35)" fg:x="14912" fg:w="32"/><text x="55.8959%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (19 samples, 0.07%)</title><rect x="55.6945%" y="197" width="0.0709%" height="15" fill="rgb(243,32,47)" fg:x="14925" fg:w="19"/><text x="55.9445%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="55.7280%" y="181" width="0.0373%" height="15" fill="rgb(247,202,23)" fg:x="14934" fg:w="10"/><text x="55.9780%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="55.7430%" y="165" width="0.0224%" height="15" fill="rgb(219,102,11)" fg:x="14938" fg:w="6"/><text x="55.9930%" y="175.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (1,127 samples, 4.21%)</title><rect x="55.7654%" y="309" width="4.2055%" height="15" fill="rgb(243,110,44)" fg:x="14944" fg:w="1127"/><text x="56.0154%" y="319.50">&lt;dlx:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (1,122 samples, 4.19%)</title><rect x="55.7840%" y="293" width="4.1869%" height="15" fill="rgb(222,74,54)" fg:x="14949" fg:w="1122"/><text x="56.0340%" y="303.50">dlx::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (12 samples, 0.04%)</title><rect x="60.0306%" y="293" width="0.0448%" height="15" fill="rgb(216,99,12)" fg:x="16087" fg:w="12"/><text x="60.2806%" y="303.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (5,044 samples, 18.82%)</title><rect x="60.0754%" y="293" width="18.8223%" height="15" fill="rgb(226,22,26)" fg:x="16099" fg:w="5044"/><text x="60.3254%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::cover_rem..</text></g><g><title>all (26,798 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="26798"/><text x="0.2500%" y="431.50"></text></g><g><title>xword_gen (26,798 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="26798"/><text x="0.2500%" y="415.50">xword_gen</text></g><g><title>clone3 (11,854 samples, 44.23%)</title><rect x="55.7654%" y="389" width="44.2346%" height="15" fill="rgb(252,105,26)" fg:x="14944" fg:w="11854"/><text x="56.0154%" y="399.50">clone3</text></g><g><title>start_thread (11,854 samples, 44.23%)</title><rect x="55.7654%" y="373" width="44.2346%" height="15" fill="rgb(220,39,43)" fg:x="14944" fg:w="11854"/><text x="56.0154%" y="383.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11,854 samples, 44.23%)</title><rect x="55.7654%" y="357" width="44.2346%" height="15" fill="rgb(229,68,48)" fg:x="14944" fg:w="11854"/><text x="56.0154%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11,854 samples, 44.23%)</title><rect x="55.7654%" y="341" width="44.2346%" height="15" fill="rgb(252,8,32)" fg:x="14944" fg:w="11854"/><text x="56.0154%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11,854 samples, 44.23%)</title><rect x="55.7654%" y="325" width="44.2346%" height="15" fill="rgb(223,20,43)" fg:x="14944" fg:w="11854"/><text x="56.0154%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,727 samples, 40.03%)</title><rect x="59.9709%" y="309" width="40.0291%" height="15" fill="rgb(229,81,49)" fg:x="16071" fg:w="10727"/><text x="60.2209%" y="319.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::trait..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (5,655 samples, 21.10%)</title><rect x="78.8977%" y="293" width="21.1023%" height="15" fill="rgb(236,28,36)" fg:x="21143" fg:w="5655"/><text x="79.1477%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::uncover_remai..</text></g></svg></svg>