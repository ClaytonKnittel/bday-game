<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="22496"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (92 samples, 0.41%)</title><rect x="0.0089%" y="229" width="0.4090%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="92"/><text x="0.2589%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (509 samples, 2.26%)</title><rect x="0.4179%" y="229" width="2.2626%" height="15" fill="rgb(217,0,24)" fg:x="94" fg:w="509"/><text x="0.6679%" y="239.50">&lt;..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (468 samples, 2.08%)</title><rect x="0.6001%" y="213" width="2.0804%" height="15" fill="rgb(221,193,54)" fg:x="135" fg:w="468"/><text x="0.8501%" y="223.50">x..</text></g><g><title>core::str::count::char_count_general_case (277 samples, 1.23%)</title><rect x="1.4491%" y="197" width="1.2313%" height="15" fill="rgb(248,212,6)" fg:x="326" fg:w="277"/><text x="1.6991%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="3.2539%" y="101" width="0.0222%" height="15" fill="rgb(208,68,35)" fg:x="732" fg:w="5"/><text x="3.5039%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="3.2361%" y="117" width="0.0445%" height="15" fill="rgb(232,128,0)" fg:x="728" fg:w="10"/><text x="3.4861%" y="127.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.24%)</title><rect x="3.1028%" y="149" width="0.2445%" height="15" fill="rgb(207,160,47)" fg:x="698" fg:w="55"/><text x="3.3528%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.23%)</title><rect x="3.1206%" y="133" width="0.2267%" height="15" fill="rgb(228,23,34)" fg:x="702" fg:w="51"/><text x="3.3706%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.07%)</title><rect x="3.2806%" y="117" width="0.0667%" height="15" fill="rgb(218,30,26)" fg:x="738" fg:w="15"/><text x="3.5306%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="3.3339%" y="101" width="0.0133%" height="15" fill="rgb(220,122,19)" fg:x="750" fg:w="3"/><text x="3.5839%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (56 samples, 0.25%)</title><rect x="3.1028%" y="181" width="0.2489%" height="15" fill="rgb(250,228,42)" fg:x="698" fg:w="56"/><text x="3.3528%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 0.25%)</title><rect x="3.1028%" y="165" width="0.2489%" height="15" fill="rgb(240,193,28)" fg:x="698" fg:w="56"/><text x="3.3528%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (916 samples, 4.07%)</title><rect x="35.9753%" y="149" width="4.0718%" height="15" fill="rgb(216,20,37)" fg:x="8093" fg:w="916"/><text x="36.2253%" y="159.50">&lt;cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,479 samples, 37.69%)</title><rect x="3.3517%" y="181" width="37.6911%" height="15" fill="rgb(206,188,39)" fg:x="754" fg:w="8479"/><text x="3.6017%" y="191.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::..</text></g><g><title>core::hash::BuildHasher::hash_one (2,085 samples, 9.27%)</title><rect x="31.7745%" y="165" width="9.2683%" height="15" fill="rgb(217,207,13)" fg:x="7148" fg:w="2085"/><text x="32.0245%" y="175.50">core::hash::B..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (224 samples, 1.00%)</title><rect x="40.0471%" y="149" width="0.9957%" height="15" fill="rgb(231,73,38)" fg:x="9009" fg:w="224"/><text x="40.2971%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition (3 samples, 0.01%)</title><rect x="41.0429%" y="181" width="0.0133%" height="15" fill="rgb(225,20,46)" fg:x="9233" fg:w="3"/><text x="41.2929%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.20%)</title><rect x="43.2166%" y="149" width="0.2000%" height="15" fill="rgb(210,31,41)" fg:x="9722" fg:w="45"/><text x="43.4666%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (103 samples, 0.46%)</title><rect x="43.0121%" y="165" width="0.4579%" height="15" fill="rgb(221,200,47)" fg:x="9676" fg:w="103"/><text x="43.2621%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (12 samples, 0.05%)</title><rect x="43.4166%" y="149" width="0.0533%" height="15" fill="rgb(226,26,5)" fg:x="9767" fg:w="12"/><text x="43.6666%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.23%)</title><rect x="43.9500%" y="133" width="0.2312%" height="15" fill="rgb(249,33,26)" fg:x="9887" fg:w="52"/><text x="44.2000%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,343 samples, 41.53%)</title><rect x="2.6938%" y="213" width="41.5318%" height="15" fill="rgb(235,183,28)" fg:x="606" fg:w="9343"/><text x="2.9438%" y="223.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (9,343 samples, 41.53%)</title><rect x="2.6938%" y="197" width="41.5318%" height="15" fill="rgb(221,5,38)" fg:x="606" fg:w="9343"/><text x="2.9438%" y="207.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (713 samples, 3.17%)</title><rect x="41.0562%" y="181" width="3.1695%" height="15" fill="rgb(247,18,42)" fg:x="9236" fg:w="713"/><text x="41.3062%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (170 samples, 0.76%)</title><rect x="43.4700%" y="165" width="0.7557%" height="15" fill="rgb(241,131,45)" fg:x="9779" fg:w="170"/><text x="43.7200%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (115 samples, 0.51%)</title><rect x="43.7144%" y="149" width="0.5112%" height="15" fill="rgb(249,31,29)" fg:x="9834" fg:w="115"/><text x="43.9644%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.04%)</title><rect x="44.1812%" y="133" width="0.0445%" height="15" fill="rgb(225,111,53)" fg:x="9939" fg:w="10"/><text x="44.4312%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.06%)</title><rect x="44.3857%" y="165" width="0.0622%" height="15" fill="rgb(238,160,17)" fg:x="9985" fg:w="14"/><text x="44.6357%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9,396 samples, 41.77%)</title><rect x="2.6938%" y="229" width="41.7674%" height="15" fill="rgb(214,148,48)" fg:x="606" fg:w="9396"/><text x="2.9438%" y="239.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (53 samples, 0.24%)</title><rect x="44.2256%" y="213" width="0.2356%" height="15" fill="rgb(232,36,49)" fg:x="9949" fg:w="53"/><text x="44.4756%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.23%)</title><rect x="44.2345%" y="197" width="0.2267%" height="15" fill="rgb(209,103,24)" fg:x="9951" fg:w="51"/><text x="44.4845%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.12%)</title><rect x="44.3457%" y="181" width="0.1156%" height="15" fill="rgb(229,88,8)" fg:x="9976" fg:w="26"/><text x="44.5957%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="44.4479%" y="165" width="0.0133%" height="15" fill="rgb(213,181,19)" fg:x="9999" fg:w="3"/><text x="44.6979%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="44.6346%" y="197" width="0.0222%" height="15" fill="rgb(254,191,54)" fg:x="10041" fg:w="5"/><text x="44.8846%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.07%)</title><rect x="44.5990%" y="213" width="0.0667%" height="15" fill="rgb(241,83,37)" fg:x="10033" fg:w="15"/><text x="44.8490%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.04%)</title><rect x="44.7680%" y="181" width="0.0400%" height="15" fill="rgb(233,36,39)" fg:x="10071" fg:w="9"/><text x="45.0180%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (78 samples, 0.35%)</title><rect x="44.4657%" y="229" width="0.3467%" height="15" fill="rgb(226,3,54)" fg:x="10003" fg:w="78"/><text x="44.7157%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (33 samples, 0.15%)</title><rect x="44.6657%" y="213" width="0.1467%" height="15" fill="rgb(245,192,40)" fg:x="10048" fg:w="33"/><text x="44.9157%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.07%)</title><rect x="44.7457%" y="197" width="0.0667%" height="15" fill="rgb(238,167,29)" fg:x="10066" fg:w="15"/><text x="44.9957%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.09%)</title><rect x="44.9591%" y="181" width="0.0889%" height="15" fill="rgb(232,182,51)" fg:x="10114" fg:w="20"/><text x="45.2091%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (55 samples, 0.24%)</title><rect x="44.8124%" y="229" width="0.2445%" height="15" fill="rgb(231,60,39)" fg:x="10081" fg:w="55"/><text x="45.0624%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (45 samples, 0.20%)</title><rect x="44.8569%" y="213" width="0.2000%" height="15" fill="rgb(208,69,12)" fg:x="10091" fg:w="45"/><text x="45.1069%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30 samples, 0.13%)</title><rect x="44.9235%" y="197" width="0.1334%" height="15" fill="rgb(235,93,37)" fg:x="10106" fg:w="30"/><text x="45.1735%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (724 samples, 3.22%)</title><rect x="49.9333%" y="133" width="3.2183%" height="15" fill="rgb(213,116,39)" fg:x="11233" fg:w="724"/><text x="50.1833%" y="143.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (117 samples, 0.52%)</title><rect x="52.6316%" y="117" width="0.5201%" height="15" fill="rgb(222,207,29)" fg:x="11840" fg:w="117"/><text x="52.8816%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.20%)</title><rect x="52.9472%" y="101" width="0.2045%" height="15" fill="rgb(206,96,30)" fg:x="11911" fg:w="46"/><text x="53.1972%" y="111.50"></text></g><g><title>__rdl_realloc (15 samples, 0.07%)</title><rect x="53.0850%" y="85" width="0.0667%" height="15" fill="rgb(218,138,4)" fg:x="11942" fg:w="15"/><text x="53.3350%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.07%)</title><rect x="53.2495%" y="117" width="0.0711%" height="15" fill="rgb(250,191,14)" fg:x="11979" fg:w="16"/><text x="53.4995%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (44 samples, 0.20%)</title><rect x="53.1561%" y="133" width="0.1956%" height="15" fill="rgb(239,60,40)" fg:x="11958" fg:w="44"/><text x="53.4061%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.03%)</title><rect x="53.3206%" y="117" width="0.0311%" height="15" fill="rgb(206,27,48)" fg:x="11995" fg:w="7"/><text x="53.5706%" y="127.50"></text></g><g><title>core::str::count::char_count_general_case (30 samples, 0.13%)</title><rect x="53.3517%" y="133" width="0.1334%" height="15" fill="rgb(225,35,8)" fg:x="12002" fg:w="30"/><text x="53.6017%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (250 samples, 1.11%)</title><rect x="60.5485%" y="101" width="1.1113%" height="15" fill="rgb(250,213,24)" fg:x="13621" fg:w="250"/><text x="60.7985%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,459 samples, 15.38%)</title><rect x="46.6083%" y="149" width="15.3761%" height="15" fill="rgb(247,123,22)" fg:x="10485" fg:w="3459"/><text x="46.8583%" y="159.50">core::ops::function::imp..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,912 samples, 8.50%)</title><rect x="53.4851%" y="133" width="8.4993%" height="15" fill="rgb(231,138,38)" fg:x="12032" fg:w="1912"/><text x="53.7351%" y="143.50">xword_gen::w..</text></g><g><title>core::hash::BuildHasher::hash_one (913 samples, 4.06%)</title><rect x="57.9259%" y="117" width="4.0585%" height="15" fill="rgb(231,145,46)" fg:x="13031" fg:w="913"/><text x="58.1759%" y="127.50">core..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (73 samples, 0.32%)</title><rect x="61.6599%" y="101" width="0.3245%" height="15" fill="rgb(251,118,11)" fg:x="13871" fg:w="73"/><text x="61.9099%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,831 samples, 17.03%)</title><rect x="45.7192%" y="181" width="17.0297%" height="15" fill="rgb(217,147,25)" fg:x="10285" fg:w="3831"/><text x="45.9692%" y="191.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,691 samples, 16.41%)</title><rect x="46.3416%" y="165" width="16.4074%" height="15" fill="rgb(247,81,37)" fg:x="10425" fg:w="3691"/><text x="46.5916%" y="175.50">&lt;core::iter::adapters::fl..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (172 samples, 0.76%)</title><rect x="61.9844%" y="149" width="0.7646%" height="15" fill="rgb(209,12,38)" fg:x="13944" fg:w="172"/><text x="62.2344%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (100 samples, 0.44%)</title><rect x="62.3044%" y="133" width="0.4445%" height="15" fill="rgb(227,1,9)" fg:x="14016" fg:w="100"/><text x="62.5544%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,981 samples, 17.70%)</title><rect x="45.0569%" y="213" width="17.6965%" height="15" fill="rgb(248,47,43)" fg:x="10136" fg:w="3981"/><text x="45.3069%" y="223.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,850 samples, 17.11%)</title><rect x="45.6392%" y="197" width="17.1142%" height="15" fill="rgb(221,10,30)" fg:x="10267" fg:w="3850"/><text x="45.8892%" y="207.50">&lt;core::iter::adapters::flat..</text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.04%)</title><rect x="63.5980%" y="133" width="0.0356%" height="15" fill="rgb(210,229,1)" fg:x="14307" fg:w="8"/><text x="63.8480%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (4 samples, 0.02%)</title><rect x="63.7180%" y="117" width="0.0178%" height="15" fill="rgb(222,148,37)" fg:x="14334" fg:w="4"/><text x="63.9680%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (10 samples, 0.04%)</title><rect x="63.8069%" y="101" width="0.0445%" height="15" fill="rgb(234,67,33)" fg:x="14354" fg:w="10"/><text x="64.0569%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.06%)</title><rect x="63.9091%" y="85" width="0.0578%" height="15" fill="rgb(247,98,35)" fg:x="14377" fg:w="13"/><text x="64.1591%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.06%)</title><rect x="63.9980%" y="69" width="0.0578%" height="15" fill="rgb(247,138,52)" fg:x="14397" fg:w="13"/><text x="64.2480%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.06%)</title><rect x="64.0736%" y="53" width="0.0578%" height="15" fill="rgb(213,79,30)" fg:x="14414" fg:w="13"/><text x="64.3236%" y="63.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.04%)</title><rect x="64.1447%" y="37" width="0.0356%" height="15" fill="rgb(246,177,23)" fg:x="14430" fg:w="8"/><text x="64.3947%" y="47.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (4,306 samples, 19.14%)</title><rect x="45.0569%" y="229" width="19.1412%" height="15" fill="rgb(230,62,27)" fg:x="10136" fg:w="4306"/><text x="45.3069%" y="239.50">itertools::Itertools::sorted_u..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (325 samples, 1.44%)</title><rect x="62.7534%" y="213" width="1.4447%" height="15" fill="rgb(216,154,8)" fg:x="14117" fg:w="325"/><text x="63.0034%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (258 samples, 1.15%)</title><rect x="63.0512%" y="197" width="1.1469%" height="15" fill="rgb(244,35,45)" fg:x="14184" fg:w="258"/><text x="63.3012%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (223 samples, 0.99%)</title><rect x="63.2068%" y="181" width="0.9913%" height="15" fill="rgb(251,115,12)" fg:x="14219" fg:w="223"/><text x="63.4568%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (186 samples, 0.83%)</title><rect x="63.3713%" y="165" width="0.8268%" height="15" fill="rgb(240,54,50)" fg:x="14256" fg:w="186"/><text x="63.6213%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (165 samples, 0.73%)</title><rect x="63.4646%" y="149" width="0.7335%" height="15" fill="rgb(233,84,52)" fg:x="14277" fg:w="165"/><text x="63.7146%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (127 samples, 0.56%)</title><rect x="63.6335%" y="133" width="0.5645%" height="15" fill="rgb(207,117,47)" fg:x="14315" fg:w="127"/><text x="63.8835%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (104 samples, 0.46%)</title><rect x="63.7358%" y="117" width="0.4623%" height="15" fill="rgb(249,43,39)" fg:x="14338" fg:w="104"/><text x="63.9858%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (78 samples, 0.35%)</title><rect x="63.8514%" y="101" width="0.3467%" height="15" fill="rgb(209,38,44)" fg:x="14364" fg:w="78"/><text x="64.1014%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (52 samples, 0.23%)</title><rect x="63.9669%" y="85" width="0.2312%" height="15" fill="rgb(236,212,23)" fg:x="14390" fg:w="52"/><text x="64.2169%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (32 samples, 0.14%)</title><rect x="64.0558%" y="69" width="0.1422%" height="15" fill="rgb(242,79,21)" fg:x="14410" fg:w="32"/><text x="64.3058%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (15 samples, 0.07%)</title><rect x="64.1314%" y="53" width="0.0667%" height="15" fill="rgb(211,96,35)" fg:x="14427" fg:w="15"/><text x="64.3814%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (4 samples, 0.02%)</title><rect x="64.1803%" y="37" width="0.0178%" height="15" fill="rgb(253,215,40)" fg:x="14438" fg:w="4"/><text x="64.4303%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.20%)</title><rect x="64.9671%" y="197" width="0.2000%" height="15" fill="rgb(211,81,21)" fg:x="14615" fg:w="45"/><text x="65.2171%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (108 samples, 0.48%)</title><rect x="64.7448%" y="213" width="0.4801%" height="15" fill="rgb(208,190,38)" fg:x="14565" fg:w="108"/><text x="64.9948%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (13 samples, 0.06%)</title><rect x="65.1671%" y="197" width="0.0578%" height="15" fill="rgb(235,213,38)" fg:x="14660" fg:w="13"/><text x="65.4171%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.04%)</title><rect x="65.3316%" y="181" width="0.0356%" height="15" fill="rgb(237,122,38)" fg:x="14697" fg:w="8"/><text x="65.5816%" y="191.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (266 samples, 1.18%)</title><rect x="64.2025%" y="229" width="1.1824%" height="15" fill="rgb(244,218,35)" fg:x="14443" fg:w="266"/><text x="64.4525%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (35 samples, 0.16%)</title><rect x="65.2294%" y="213" width="0.1556%" height="15" fill="rgb(240,68,47)" fg:x="14674" fg:w="35"/><text x="65.4794%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.10%)</title><rect x="65.2872%" y="197" width="0.0978%" height="15" fill="rgb(210,16,53)" fg:x="14687" fg:w="22"/><text x="65.5372%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.02%)</title><rect x="65.3672%" y="181" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="14705" fg:w="4"/><text x="65.6172%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27 samples, 0.12%)</title><rect x="65.5405%" y="181" width="0.1200%" height="15" fill="rgb(224,169,11)" fg:x="14744" fg:w="27"/><text x="65.7905%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (63 samples, 0.28%)</title><rect x="65.3850%" y="213" width="0.2800%" height="15" fill="rgb(250,166,2)" fg:x="14709" fg:w="63"/><text x="65.6350%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 0.16%)</title><rect x="65.5005%" y="197" width="0.1645%" height="15" fill="rgb(242,216,29)" fg:x="14735" fg:w="37"/><text x="65.7505%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.03%)</title><rect x="65.8606%" y="181" width="0.0311%" height="15" fill="rgb(230,116,27)" fg:x="14816" fg:w="7"/><text x="66.1106%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.11%)</title><rect x="65.7895%" y="197" width="0.1067%" height="15" fill="rgb(228,99,48)" fg:x="14800" fg:w="24"/><text x="66.0395%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.06%)</title><rect x="65.9584%" y="165" width="0.0622%" height="15" fill="rgb(253,11,6)" fg:x="14838" fg:w="14"/><text x="66.2084%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (81 samples, 0.36%)</title><rect x="65.6650%" y="213" width="0.3601%" height="15" fill="rgb(247,143,39)" fg:x="14772" fg:w="81"/><text x="65.9150%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (29 samples, 0.13%)</title><rect x="65.8962%" y="197" width="0.1289%" height="15" fill="rgb(236,97,10)" fg:x="14824" fg:w="29"/><text x="66.1462%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.09%)</title><rect x="65.9317%" y="181" width="0.0933%" height="15" fill="rgb(233,208,19)" fg:x="14832" fg:w="21"/><text x="66.1817%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.12%)</title><rect x="66.6074%" y="181" width="0.1156%" height="15" fill="rgb(216,164,2)" fg:x="14984" fg:w="26"/><text x="66.8574%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.37%)</title><rect x="66.3629%" y="197" width="0.3690%" height="15" fill="rgb(220,129,5)" fg:x="14929" fg:w="83"/><text x="66.6129%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (3 samples, 0.01%)</title><rect x="66.7319%" y="197" width="0.0133%" height="15" fill="rgb(242,17,10)" fg:x="15012" fg:w="3"/><text x="66.9819%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (308 samples, 1.37%)</title><rect x="65.3850%" y="229" width="1.3691%" height="15" fill="rgb(242,107,0)" fg:x="14709" fg:w="308"/><text x="65.6350%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (164 samples, 0.73%)</title><rect x="66.0251%" y="213" width="0.7290%" height="15" fill="rgb(251,28,31)" fg:x="14853" fg:w="164"/><text x="66.2751%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.12%)</title><rect x="66.7541%" y="213" width="0.1245%" height="15" fill="rgb(233,223,10)" fg:x="15017" fg:w="28"/><text x="67.0041%" y="223.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (25 samples, 0.11%)</title><rect x="66.7674%" y="197" width="0.1111%" height="15" fill="rgb(215,21,27)" fg:x="15020" fg:w="25"/><text x="67.0174%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (13 samples, 0.06%)</title><rect x="66.8208%" y="181" width="0.0578%" height="15" fill="rgb(232,23,21)" fg:x="15032" fg:w="13"/><text x="67.0708%" y="191.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (3 samples, 0.01%)</title><rect x="66.8786%" y="213" width="0.0133%" height="15" fill="rgb(244,5,23)" fg:x="15045" fg:w="3"/><text x="67.1286%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.03%)</title><rect x="66.8919%" y="213" width="0.0311%" height="15" fill="rgb(226,81,46)" fg:x="15048" fg:w="7"/><text x="67.1419%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.02%)</title><rect x="66.9008%" y="197" width="0.0222%" height="15" fill="rgb(247,70,30)" fg:x="15050" fg:w="5"/><text x="67.1508%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.10%)</title><rect x="67.4387%" y="101" width="0.0978%" height="15" fill="rgb(212,68,19)" fg:x="15171" fg:w="22"/><text x="67.6887%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (58 samples, 0.26%)</title><rect x="67.2964%" y="117" width="0.2578%" height="15" fill="rgb(240,187,13)" fg:x="15139" fg:w="58"/><text x="67.5464%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.02%)</title><rect x="67.5365%" y="101" width="0.0178%" height="15" fill="rgb(223,113,26)" fg:x="15193" fg:w="4"/><text x="67.7865%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (117 samples, 0.52%)</title><rect x="67.0386%" y="133" width="0.5201%" height="15" fill="rgb(206,192,2)" fg:x="15081" fg:w="117"/><text x="67.2886%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (332 samples, 1.48%)</title><rect x="66.9230%" y="149" width="1.4758%" height="15" fill="rgb(241,108,4)" fg:x="15055" fg:w="332"/><text x="67.1730%" y="159.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (189 samples, 0.84%)</title><rect x="67.5587%" y="133" width="0.8401%" height="15" fill="rgb(247,173,49)" fg:x="15198" fg:w="189"/><text x="67.8087%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (97 samples, 0.43%)</title><rect x="67.9676%" y="117" width="0.4312%" height="15" fill="rgb(224,114,35)" fg:x="15290" fg:w="97"/><text x="68.2176%" y="127.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (333 samples, 1.48%)</title><rect x="66.9230%" y="213" width="1.4803%" height="15" fill="rgb(245,159,27)" fg:x="15055" fg:w="333"/><text x="67.1730%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (333 samples, 1.48%)</title><rect x="66.9230%" y="197" width="1.4803%" height="15" fill="rgb(245,172,44)" fg:x="15055" fg:w="333"/><text x="67.1730%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (333 samples, 1.48%)</title><rect x="66.9230%" y="181" width="1.4803%" height="15" fill="rgb(236,23,11)" fg:x="15055" fg:w="333"/><text x="67.1730%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (333 samples, 1.48%)</title><rect x="66.9230%" y="165" width="1.4803%" height="15" fill="rgb(205,117,38)" fg:x="15055" fg:w="333"/><text x="67.1730%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="68.4166%" y="197" width="0.0133%" height="15" fill="rgb(237,72,25)" fg:x="15391" fg:w="3"/><text x="68.6666%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (8 samples, 0.04%)</title><rect x="68.4033%" y="213" width="0.0356%" height="15" fill="rgb(244,70,9)" fg:x="15388" fg:w="8"/><text x="68.6533%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.03%)</title><rect x="68.4388%" y="197" width="0.0311%" height="15" fill="rgb(217,125,39)" fg:x="15396" fg:w="7"/><text x="68.6888%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="68.4477%" y="181" width="0.0222%" height="15" fill="rgb(235,36,10)" fg:x="15398" fg:w="5"/><text x="68.6977%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="68.4477%" y="165" width="0.0222%" height="15" fill="rgb(251,123,47)" fg:x="15398" fg:w="5"/><text x="68.6977%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.04%)</title><rect x="68.4700%" y="197" width="0.0356%" height="15" fill="rgb(221,13,13)" fg:x="15403" fg:w="8"/><text x="68.7200%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.02%)</title><rect x="68.4833%" y="181" width="0.0222%" height="15" fill="rgb(238,131,9)" fg:x="15406" fg:w="5"/><text x="68.7333%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.01%)</title><rect x="68.4922%" y="165" width="0.0133%" height="15" fill="rgb(211,50,8)" fg:x="15408" fg:w="3"/><text x="68.7422%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="68.4922%" y="149" width="0.0133%" height="15" fill="rgb(245,182,24)" fg:x="15408" fg:w="3"/><text x="68.7422%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="68.5500%" y="181" width="0.0222%" height="15" fill="rgb(242,14,37)" fg:x="15421" fg:w="5"/><text x="68.8000%" y="191.50"></text></g><g><title>_start (15,427 samples, 68.58%)</title><rect x="0.0000%" y="389" width="68.5766%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="399.50">_start</text></g><g><title>__libc_start_main_impl (15,427 samples, 68.58%)</title><rect x="0.0000%" y="373" width="68.5766%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="383.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (15,427 samples, 68.58%)</title><rect x="0.0000%" y="357" width="68.5766%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="367.50">__libc_start_call_main</text></g><g><title>main (15,427 samples, 68.58%)</title><rect x="0.0000%" y="341" width="68.5766%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (15,427 samples, 68.58%)</title><rect x="0.0000%" y="325" width="68.5766%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (15,427 samples, 68.58%)</title><rect x="0.0000%" y="309" width="68.5766%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (15,427 samples, 68.58%)</title><rect x="0.0000%" y="293" width="68.5766%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (15,427 samples, 68.58%)</title><rect x="0.0000%" y="277" width="68.5766%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="287.50">xword_gen::main</text></g><g><title>util::time::time_fn (15,427 samples, 68.58%)</title><rect x="0.0000%" y="261" width="68.5766%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="271.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (15,427 samples, 68.58%)</title><rect x="0.0000%" y="245" width="68.5766%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="15427"/><text x="0.2500%" y="255.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (410 samples, 1.82%)</title><rect x="66.7541%" y="229" width="1.8225%" height="15" fill="rgb(205,98,50)" fg:x="15017" fg:w="410"/><text x="67.0041%" y="239.50">x..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (31 samples, 0.14%)</title><rect x="68.4388%" y="213" width="0.1378%" height="15" fill="rgb(205,185,37)" fg:x="15396" fg:w="31"/><text x="68.6888%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (16 samples, 0.07%)</title><rect x="68.5055%" y="197" width="0.0711%" height="15" fill="rgb(238,207,15)" fg:x="15411" fg:w="16"/><text x="68.7555%" y="207.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (1,057 samples, 4.70%)</title><rect x="68.5811%" y="309" width="4.6986%" height="15" fill="rgb(213,199,42)" fg:x="15428" fg:w="1057"/><text x="68.8311%" y="319.50">&lt;dlx:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (1,053 samples, 4.68%)</title><rect x="68.5989%" y="293" width="4.6808%" height="15" fill="rgb(235,201,11)" fg:x="15432" fg:w="1053"/><text x="68.8489%" y="303.50">dlx::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="73.3597%" y="293" width="0.0267%" height="15" fill="rgb(207,46,11)" fg:x="16503" fg:w="6"/><text x="73.6097%" y="303.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (2,982 samples, 13.26%)</title><rect x="73.3864%" y="293" width="13.2557%" height="15" fill="rgb(241,35,35)" fg:x="16509" fg:w="2982"/><text x="73.6364%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::..</text></g><g><title>all (22,496 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="22496"/><text x="0.2500%" y="431.50"></text></g><g><title>xword_gen (22,496 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="22496"/><text x="0.2500%" y="415.50">xword_gen</text></g><g><title>clone3 (7,069 samples, 31.42%)</title><rect x="68.5766%" y="389" width="31.4234%" height="15" fill="rgb(219,102,11)" fg:x="15427" fg:w="7069"/><text x="68.8266%" y="399.50">clone3</text></g><g><title>start_thread (7,069 samples, 31.42%)</title><rect x="68.5766%" y="373" width="31.4234%" height="15" fill="rgb(243,110,44)" fg:x="15427" fg:w="7069"/><text x="68.8266%" y="383.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (7,069 samples, 31.42%)</title><rect x="68.5766%" y="357" width="31.4234%" height="15" fill="rgb(222,74,54)" fg:x="15427" fg:w="7069"/><text x="68.8266%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_st..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,069 samples, 31.42%)</title><rect x="68.5766%" y="341" width="31.4234%" height="15" fill="rgb(216,99,12)" fg:x="15427" fg:w="7069"/><text x="68.8266%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,069 samples, 31.42%)</title><rect x="68.5766%" y="325" width="31.4234%" height="15" fill="rgb(226,22,26)" fg:x="15427" fg:w="7069"/><text x="68.8266%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,011 samples, 26.72%)</title><rect x="73.2797%" y="309" width="26.7203%" height="15" fill="rgb(217,163,10)" fg:x="16485" fg:w="6011"/><text x="73.5297%" y="319.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (3,005 samples, 13.36%)</title><rect x="86.6421%" y="293" width="13.3579%" height="15" fill="rgb(213,25,53)" fg:x="19491" fg:w="3005"/><text x="86.8921%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::..</text></g></svg></svg>