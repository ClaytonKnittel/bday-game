<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="26167"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (90 samples, 0.34%)</title><rect x="0.0038%" y="229" width="0.3439%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="90"/><text x="0.2538%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (763 samples, 2.92%)</title><rect x="4.5019%" y="149" width="2.9159%" height="15" fill="rgb(217,0,24)" fg:x="1178" fg:w="763"/><text x="4.7519%" y="159.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (108 samples, 0.41%)</title><rect x="7.0050%" y="133" width="0.4127%" height="15" fill="rgb(221,193,54)" fg:x="1833" fg:w="108"/><text x="7.2550%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 0.13%)</title><rect x="7.2840%" y="117" width="0.1338%" height="15" fill="rgb(248,212,6)" fg:x="1906" fg:w="35"/><text x="7.5340%" y="127.50"></text></g><g><title>__rdl_realloc (15 samples, 0.06%)</title><rect x="7.3604%" y="101" width="0.0573%" height="15" fill="rgb(208,68,35)" fg:x="1926" fg:w="15"/><text x="7.6104%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.15%)</title><rect x="7.4216%" y="149" width="0.1529%" height="15" fill="rgb(232,128,0)" fg:x="1942" fg:w="40"/><text x="7.6716%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.04%)</title><rect x="7.5362%" y="133" width="0.0382%" height="15" fill="rgb(207,160,47)" fg:x="1972" fg:w="10"/><text x="7.7862%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (34 samples, 0.13%)</title><rect x="7.5744%" y="149" width="0.1299%" height="15" fill="rgb(228,23,34)" fg:x="1982" fg:w="34"/><text x="7.8244%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,417 samples, 13.06%)</title><rect x="1.6777%" y="165" width="13.0584%" height="15" fill="rgb(218,30,26)" fg:x="439" fg:w="3417"/><text x="1.9277%" y="175.50">core::ops::function:..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,840 samples, 7.03%)</title><rect x="7.7044%" y="149" width="7.0318%" height="15" fill="rgb(220,122,19)" fg:x="2016" fg:w="1840"/><text x="7.9544%" y="159.50">xword_gen..</text></g><g><title>core::hash::BuildHasher::hash_one (908 samples, 3.47%)</title><rect x="11.2661%" y="133" width="3.4700%" height="15" fill="rgb(250,228,42)" fg:x="2948" fg:w="908"/><text x="11.5161%" y="143.50">cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (254 samples, 0.97%)</title><rect x="13.7654%" y="117" width="0.9707%" height="15" fill="rgb(240,193,28)" fg:x="3602" fg:w="254"/><text x="14.0154%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,710 samples, 14.18%)</title><rect x="0.9898%" y="197" width="14.1782%" height="15" fill="rgb(216,20,37)" fg:x="259" fg:w="3710"/><text x="1.2398%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,588 samples, 13.71%)</title><rect x="1.4560%" y="181" width="13.7119%" height="15" fill="rgb(206,188,39)" fg:x="381" fg:w="3588"/><text x="1.7060%" y="191.50">&lt;core::iter::adapters..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (113 samples, 0.43%)</title><rect x="14.7361%" y="165" width="0.4318%" height="15" fill="rgb(217,207,13)" fg:x="3856" fg:w="113"/><text x="14.9861%" y="175.50"></text></g><g><title>core::str::count::char_count_general_case (61 samples, 0.23%)</title><rect x="14.9348%" y="149" width="0.2331%" height="15" fill="rgb(231,73,38)" fg:x="3908" fg:w="61"/><text x="15.1848%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,723 samples, 14.23%)</title><rect x="0.9592%" y="213" width="14.2278%" height="15" fill="rgb(225,20,46)" fg:x="251" fg:w="3723"/><text x="1.2092%" y="223.50">&lt;core::iter::adapters:..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::build_word_assignments_from_entries&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::scan::Scan&lt;core::ops::range::Range&lt;u32&gt;,u32,common::crossword::Crossword::iterate_board_row_clues&lt;&amp;util::grid::Grid&lt;common::crossword::XWordTile&gt;&gt;::{{closure}}&gt;&gt;,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iter_board_entries::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::scan::Scan&lt;core::ops::range::Range&lt;u32&gt;,u32,common::crossword::Crossword::iterate_board_row_clues&lt;util::grid::TransposeGrid&lt;common::crossword::XWordTile&gt;&gt;::{{closure}}&gt;&gt;,common::crossword::Crossword::iterate_col_clues::{{closure}}&gt;,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iter_board_entries::{{closure}}&gt;&gt;&gt;::{{closure}}&gt; (5 samples, 0.02%)</title><rect x="15.1680%" y="197" width="0.0191%" height="15" fill="rgb(210,31,41)" fg:x="3969" fg:w="5"/><text x="15.4180%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="15.1680%" y="181" width="0.0191%" height="15" fill="rgb(221,200,47)" fg:x="3969" fg:w="5"/><text x="15.4180%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="15.1718%" y="165" width="0.0153%" height="15" fill="rgb(226,26,5)" fg:x="3970" fg:w="4"/><text x="15.4218%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,072 samples, 15.56%)</title><rect x="0.3478%" y="229" width="15.5616%" height="15" fill="rgb(249,33,26)" fg:x="91" fg:w="4072"/><text x="0.5978%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (189 samples, 0.72%)</title><rect x="15.1871%" y="213" width="0.7223%" height="15" fill="rgb(235,183,28)" fg:x="3974" fg:w="189"/><text x="15.4371%" y="223.50"></text></g><g><title>core::str::count::char_count_general_case (120 samples, 0.46%)</title><rect x="15.4508%" y="197" width="0.4586%" height="15" fill="rgb(221,5,38)" fg:x="4043" fg:w="120"/><text x="15.7008%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="16.3259%" y="117" width="0.0420%" height="15" fill="rgb(247,18,42)" fg:x="4272" fg:w="11"/><text x="16.5759%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="16.3565%" y="101" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="4280" fg:w="3"/><text x="16.6065%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (55 samples, 0.21%)</title><rect x="16.2495%" y="181" width="0.2102%" height="15" fill="rgb(249,31,29)" fg:x="4252" fg:w="55"/><text x="16.4995%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.21%)</title><rect x="16.2495%" y="165" width="0.2102%" height="15" fill="rgb(225,111,53)" fg:x="4252" fg:w="55"/><text x="16.4995%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.21%)</title><rect x="16.2495%" y="149" width="0.2102%" height="15" fill="rgb(238,160,17)" fg:x="4252" fg:w="55"/><text x="16.4995%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.19%)</title><rect x="16.2648%" y="133" width="0.1949%" height="15" fill="rgb(214,148,48)" fg:x="4256" fg:w="51"/><text x="16.5148%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.09%)</title><rect x="16.3679%" y="117" width="0.0917%" height="15" fill="rgb(232,36,49)" fg:x="4283" fg:w="24"/><text x="16.6179%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="16.4176%" y="101" width="0.0420%" height="15" fill="rgb(209,103,24)" fg:x="4296" fg:w="11"/><text x="16.6676%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="16.4482%" y="85" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="4304" fg:w="3"/><text x="16.6982%" y="95.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="41.0364%" y="165" width="0.0115%" height="15" fill="rgb(213,181,19)" fg:x="10738" fg:w="3"/><text x="41.2864%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,564 samples, 32.73%)</title><rect x="16.4597%" y="181" width="32.7282%" height="15" fill="rgb(254,191,54)" fg:x="4307" fg:w="8564"/><text x="16.7097%" y="191.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::..</text></g><g><title>core::hash::BuildHasher::hash_one (2,130 samples, 8.14%)</title><rect x="41.0479%" y="165" width="8.1400%" height="15" fill="rgb(241,83,37)" fg:x="10741" fg:w="2130"/><text x="41.2979%" y="175.50">core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (973 samples, 3.72%)</title><rect x="45.4695%" y="149" width="3.7184%" height="15" fill="rgb(233,36,39)" fg:x="11898" fg:w="973"/><text x="45.7195%" y="159.50">&lt;cor..</text></g><g><title>core::hash::BuildHasher::hash_one (101 samples, 0.39%)</title><rect x="50.7051%" y="165" width="0.3860%" height="15" fill="rgb(226,3,54)" fg:x="13268" fg:w="101"/><text x="50.9551%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.20%)</title><rect x="50.8923%" y="149" width="0.1987%" height="15" fill="rgb(245,192,40)" fg:x="13317" fg:w="52"/><text x="51.1423%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,433 samples, 36.05%)</title><rect x="15.9094%" y="213" width="36.0492%" height="15" fill="rgb(238,167,29)" fg:x="4163" fg:w="9433"/><text x="16.1594%" y="223.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (9,433 samples, 36.05%)</title><rect x="15.9094%" y="197" width="36.0492%" height="15" fill="rgb(232,182,51)" fg:x="4163" fg:w="9433"/><text x="16.1594%" y="207.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (724 samples, 2.77%)</title><rect x="49.1917%" y="181" width="2.7668%" height="15" fill="rgb(231,60,39)" fg:x="12872" fg:w="724"/><text x="49.4417%" y="191.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (227 samples, 0.87%)</title><rect x="51.0911%" y="165" width="0.8675%" height="15" fill="rgb(208,69,12)" fg:x="13369" fg:w="227"/><text x="51.3411%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (168 samples, 0.64%)</title><rect x="51.3165%" y="149" width="0.6420%" height="15" fill="rgb(235,93,37)" fg:x="13428" fg:w="168"/><text x="51.5665%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (67 samples, 0.26%)</title><rect x="51.7025%" y="133" width="0.2560%" height="15" fill="rgb(213,116,39)" fg:x="13529" fg:w="67"/><text x="51.9525%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9,476 samples, 36.21%)</title><rect x="15.9094%" y="229" width="36.2136%" height="15" fill="rgb(222,207,29)" fg:x="4163" fg:w="9476"/><text x="16.1594%" y="239.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter:..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (43 samples, 0.16%)</title><rect x="51.9586%" y="213" width="0.1643%" height="15" fill="rgb(206,96,30)" fg:x="13596" fg:w="43"/><text x="52.2086%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.16%)</title><rect x="51.9662%" y="197" width="0.1567%" height="15" fill="rgb(218,138,4)" fg:x="13598" fg:w="41"/><text x="52.2162%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.08%)</title><rect x="52.0388%" y="181" width="0.0841%" height="15" fill="rgb(250,191,14)" fg:x="13617" fg:w="22"/><text x="52.2888%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="52.0694%" y="165" width="0.0535%" height="15" fill="rgb(239,60,40)" fg:x="13625" fg:w="14"/><text x="52.3194%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.01%)</title><rect x="52.7038%" y="165" width="0.0115%" height="15" fill="rgb(206,27,48)" fg:x="13791" fg:w="3"/><text x="52.9538%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (5 samples, 0.02%)</title><rect x="52.8070%" y="149" width="0.0191%" height="15" fill="rgb(225,35,8)" fg:x="13818" fg:w="5"/><text x="53.0570%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (9 samples, 0.03%)</title><rect x="52.9063%" y="133" width="0.0344%" height="15" fill="rgb(250,213,24)" fg:x="13844" fg:w="9"/><text x="53.1563%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.03%)</title><rect x="53.0210%" y="117" width="0.0306%" height="15" fill="rgb(247,123,22)" fg:x="13874" fg:w="8"/><text x="53.2710%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (14 samples, 0.05%)</title><rect x="53.0783%" y="101" width="0.0535%" height="15" fill="rgb(231,138,38)" fg:x="13889" fg:w="14"/><text x="53.3283%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (11 samples, 0.04%)</title><rect x="53.1700%" y="85" width="0.0420%" height="15" fill="rgb(231,145,46)" fg:x="13913" fg:w="11"/><text x="53.4200%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (9 samples, 0.03%)</title><rect x="53.2273%" y="69" width="0.0344%" height="15" fill="rgb(251,118,11)" fg:x="13928" fg:w="9"/><text x="53.4773%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (4 samples, 0.02%)</title><rect x="53.2694%" y="53" width="0.0153%" height="15" fill="rgb(217,147,25)" fg:x="13939" fg:w="4"/><text x="53.5194%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (309 samples, 1.18%)</title><rect x="52.1267%" y="229" width="1.1809%" height="15" fill="rgb(247,81,37)" fg:x="13640" fg:w="309"/><text x="52.3767%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (246 samples, 0.94%)</title><rect x="52.3675%" y="213" width="0.9401%" height="15" fill="rgb(209,12,38)" fg:x="13703" fg:w="246"/><text x="52.6175%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (211 samples, 0.81%)</title><rect x="52.5012%" y="197" width="0.8064%" height="15" fill="rgb(227,1,9)" fg:x="13738" fg:w="211"/><text x="52.7512%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (179 samples, 0.68%)</title><rect x="52.6235%" y="181" width="0.6841%" height="15" fill="rgb(248,47,43)" fg:x="13770" fg:w="179"/><text x="52.8735%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (155 samples, 0.59%)</title><rect x="52.7153%" y="165" width="0.5923%" height="15" fill="rgb(221,10,30)" fg:x="13794" fg:w="155"/><text x="52.9653%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (126 samples, 0.48%)</title><rect x="52.8261%" y="149" width="0.4815%" height="15" fill="rgb(210,229,1)" fg:x="13823" fg:w="126"/><text x="53.0761%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (96 samples, 0.37%)</title><rect x="52.9407%" y="133" width="0.3669%" height="15" fill="rgb(222,148,37)" fg:x="13853" fg:w="96"/><text x="53.1907%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (67 samples, 0.26%)</title><rect x="53.0516%" y="117" width="0.2560%" height="15" fill="rgb(234,67,33)" fg:x="13882" fg:w="67"/><text x="53.3016%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (46 samples, 0.18%)</title><rect x="53.1318%" y="101" width="0.1758%" height="15" fill="rgb(247,98,35)" fg:x="13903" fg:w="46"/><text x="53.3818%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (25 samples, 0.10%)</title><rect x="53.2121%" y="85" width="0.0955%" height="15" fill="rgb(247,138,52)" fg:x="13924" fg:w="25"/><text x="53.4621%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (12 samples, 0.05%)</title><rect x="53.2617%" y="69" width="0.0459%" height="15" fill="rgb(213,79,30)" fg:x="13937" fg:w="12"/><text x="53.5117%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="53.2847%" y="53" width="0.0229%" height="15" fill="rgb(246,177,23)" fg:x="13943" fg:w="6"/><text x="53.5347%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="53.2961%" y="37" width="0.0115%" height="15" fill="rgb(230,62,27)" fg:x="13946" fg:w="3"/><text x="53.5461%" y="47.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (42 samples, 0.16%)</title><rect x="53.3076%" y="229" width="0.1605%" height="15" fill="rgb(216,154,8)" fg:x="13949" fg:w="42"/><text x="53.5576%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32 samples, 0.12%)</title><rect x="53.3458%" y="213" width="0.1223%" height="15" fill="rgb(244,35,45)" fg:x="13959" fg:w="32"/><text x="53.5958%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.10%)</title><rect x="53.3687%" y="197" width="0.0994%" height="15" fill="rgb(251,115,12)" fg:x="13965" fg:w="26"/><text x="53.6187%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="53.4031%" y="181" width="0.0650%" height="15" fill="rgb(240,54,50)" fg:x="13974" fg:w="17"/><text x="53.6531%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (51 samples, 0.19%)</title><rect x="53.6554%" y="213" width="0.1949%" height="15" fill="rgb(233,84,52)" fg:x="14040" fg:w="51"/><text x="53.9054%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.08%)</title><rect x="53.7700%" y="197" width="0.0803%" height="15" fill="rgb(207,117,47)" fg:x="14070" fg:w="21"/><text x="54.0200%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.03%)</title><rect x="53.8923%" y="197" width="0.0344%" height="15" fill="rgb(249,43,39)" fg:x="14102" fg:w="9"/><text x="54.1423%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="53.9114%" y="181" width="0.0153%" height="15" fill="rgb(209,38,44)" fg:x="14107" fg:w="4"/><text x="54.1614%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.15%)</title><rect x="53.8503%" y="213" width="0.1452%" height="15" fill="rgb(236,212,23)" fg:x="14091" fg:w="38"/><text x="54.1003%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.07%)</title><rect x="53.9267%" y="197" width="0.0688%" height="15" fill="rgb(242,79,21)" fg:x="14111" fg:w="18"/><text x="54.1767%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.03%)</title><rect x="53.9649%" y="181" width="0.0306%" height="15" fill="rgb(211,96,35)" fg:x="14121" fg:w="8"/><text x="54.2149%" y="191.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (155 samples, 0.59%)</title><rect x="53.4719%" y="229" width="0.5923%" height="15" fill="rgb(253,215,40)" fg:x="13992" fg:w="155"/><text x="53.7219%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (18 samples, 0.07%)</title><rect x="53.9955%" y="213" width="0.0688%" height="15" fill="rgb(211,81,21)" fg:x="14129" fg:w="18"/><text x="54.2455%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.04%)</title><rect x="54.0222%" y="197" width="0.0420%" height="15" fill="rgb(208,190,38)" fg:x="14136" fg:w="11"/><text x="54.2722%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="54.0413%" y="181" width="0.0229%" height="15" fill="rgb(235,213,38)" fg:x="14141" fg:w="6"/><text x="54.2913%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 0.12%)</title><rect x="54.0643%" y="213" width="0.1185%" height="15" fill="rgb(237,122,38)" fg:x="14147" fg:w="31"/><text x="54.3143%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.08%)</title><rect x="54.0987%" y="197" width="0.0841%" height="15" fill="rgb(244,218,35)" fg:x="14156" fg:w="22"/><text x="54.3487%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.06%)</title><rect x="54.1178%" y="181" width="0.0650%" height="15" fill="rgb(240,68,47)" fg:x="14161" fg:w="17"/><text x="54.3678%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.06%)</title><rect x="54.2936%" y="197" width="0.0611%" height="15" fill="rgb(210,16,53)" fg:x="14207" fg:w="16"/><text x="54.5436%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.03%)</title><rect x="54.3241%" y="181" width="0.0306%" height="15" fill="rgb(235,124,12)" fg:x="14215" fg:w="8"/><text x="54.5741%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (70 samples, 0.27%)</title><rect x="54.1827%" y="213" width="0.2675%" height="15" fill="rgb(224,169,11)" fg:x="14178" fg:w="70"/><text x="54.4327%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.10%)</title><rect x="54.3547%" y="197" width="0.0955%" height="15" fill="rgb(250,166,2)" fg:x="14223" fg:w="25"/><text x="54.6047%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.07%)</title><rect x="54.3815%" y="181" width="0.0688%" height="15" fill="rgb(242,216,29)" fg:x="14230" fg:w="18"/><text x="54.6315%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="54.4350%" y="165" width="0.0153%" height="15" fill="rgb(230,116,27)" fg:x="14244" fg:w="4"/><text x="54.6850%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (69 samples, 0.26%)</title><rect x="54.7216%" y="197" width="0.2637%" height="15" fill="rgb(228,99,48)" fg:x="14319" fg:w="69"/><text x="54.9716%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.08%)</title><rect x="54.9089%" y="181" width="0.0764%" height="15" fill="rgb(253,11,6)" fg:x="14368" fg:w="20"/><text x="55.1589%" y="191.50"></text></g><g><title>core::str::count::char_count_general_case (4 samples, 0.02%)</title><rect x="54.9853%" y="197" width="0.0153%" height="15" fill="rgb(247,143,39)" fg:x="14388" fg:w="4"/><text x="55.2353%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (247 samples, 0.94%)</title><rect x="54.0643%" y="229" width="0.9439%" height="15" fill="rgb(236,97,10)" fg:x="14147" fg:w="247"/><text x="54.3143%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (146 samples, 0.56%)</title><rect x="54.4503%" y="213" width="0.5580%" height="15" fill="rgb(233,208,19)" fg:x="14248" fg:w="146"/><text x="54.7003%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (38 samples, 0.15%)</title><rect x="55.1764%" y="133" width="0.1452%" height="15" fill="rgb(216,164,2)" fg:x="14438" fg:w="38"/><text x="55.4264%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.05%)</title><rect x="55.2681%" y="117" width="0.0535%" height="15" fill="rgb(220,129,5)" fg:x="14462" fg:w="14"/><text x="55.5181%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (58 samples, 0.22%)</title><rect x="55.1038%" y="149" width="0.2217%" height="15" fill="rgb(242,17,10)" fg:x="14419" fg:w="58"/><text x="55.3538%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (236 samples, 0.90%)</title><rect x="55.0197%" y="197" width="0.9019%" height="15" fill="rgb(242,107,0)" fg:x="14397" fg:w="236"/><text x="55.2697%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (236 samples, 0.90%)</title><rect x="55.0197%" y="181" width="0.9019%" height="15" fill="rgb(251,28,31)" fg:x="14397" fg:w="236"/><text x="55.2697%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (236 samples, 0.90%)</title><rect x="55.0197%" y="165" width="0.9019%" height="15" fill="rgb(233,223,10)" fg:x="14397" fg:w="236"/><text x="55.2697%" y="175.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (156 samples, 0.60%)</title><rect x="55.3254%" y="149" width="0.5962%" height="15" fill="rgb(215,21,27)" fg:x="14477" fg:w="156"/><text x="55.5754%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (101 samples, 0.39%)</title><rect x="55.5356%" y="133" width="0.3860%" height="15" fill="rgb(232,23,21)" fg:x="14532" fg:w="101"/><text x="55.7856%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (249 samples, 0.95%)</title><rect x="55.0120%" y="213" width="0.9516%" height="15" fill="rgb(244,5,23)" fg:x="14395" fg:w="249"/><text x="55.2620%" y="223.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (11 samples, 0.04%)</title><rect x="55.9216%" y="197" width="0.0420%" height="15" fill="rgb(226,81,46)" fg:x="14633" fg:w="11"/><text x="56.1716%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (7 samples, 0.03%)</title><rect x="55.9369%" y="181" width="0.0268%" height="15" fill="rgb(247,70,30)" fg:x="14637" fg:w="7"/><text x="56.1869%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="55.9942%" y="197" width="0.0191%" height="15" fill="rgb(212,68,19)" fg:x="14652" fg:w="5"/><text x="56.2442%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="56.0018%" y="181" width="0.0115%" height="15" fill="rgb(240,187,13)" fg:x="14654" fg:w="3"/><text x="56.2518%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="56.0133%" y="197" width="0.0115%" height="15" fill="rgb(223,113,26)" fg:x="14657" fg:w="3"/><text x="56.2633%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (16 samples, 0.06%)</title><rect x="55.9674%" y="213" width="0.0611%" height="15" fill="rgb(206,192,2)" fg:x="14645" fg:w="16"/><text x="56.2174%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.02%)</title><rect x="56.0324%" y="197" width="0.0229%" height="15" fill="rgb(241,108,4)" fg:x="14662" fg:w="6"/><text x="56.2824%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="56.0439%" y="181" width="0.0115%" height="15" fill="rgb(247,173,49)" fg:x="14665" fg:w="3"/><text x="56.2939%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.04%)</title><rect x="56.0668%" y="181" width="0.0382%" height="15" fill="rgb(224,114,35)" fg:x="14671" fg:w="10"/><text x="56.3168%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.02%)</title><rect x="56.0859%" y="165" width="0.0191%" height="15" fill="rgb(245,159,27)" fg:x="14676" fg:w="5"/><text x="56.3359%" y="175.50"></text></g><g><title>_start (14,683 samples, 56.11%)</title><rect x="0.0000%" y="389" width="56.1127%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="399.50">_start</text></g><g><title>__libc_start_main_impl (14,683 samples, 56.11%)</title><rect x="0.0000%" y="373" width="56.1127%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="383.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (14,683 samples, 56.11%)</title><rect x="0.0000%" y="357" width="56.1127%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="367.50">__libc_start_call_main</text></g><g><title>main (14,683 samples, 56.11%)</title><rect x="0.0000%" y="341" width="56.1127%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (14,683 samples, 56.11%)</title><rect x="0.0000%" y="325" width="56.1127%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (14,683 samples, 56.11%)</title><rect x="0.0000%" y="309" width="56.1127%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (14,683 samples, 56.11%)</title><rect x="0.0000%" y="293" width="56.1127%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (14,683 samples, 56.11%)</title><rect x="0.0000%" y="277" width="56.1127%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="287.50">xword_gen::main</text></g><g><title>util::time::time_fn (14,683 samples, 56.11%)</title><rect x="0.0000%" y="261" width="56.1127%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="271.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (14,683 samples, 56.11%)</title><rect x="0.0000%" y="245" width="56.1127%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="14683"/><text x="0.2500%" y="255.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (289 samples, 1.10%)</title><rect x="55.0082%" y="229" width="1.1044%" height="15" fill="rgb(211,50,8)" fg:x="14394" fg:w="289"/><text x="55.2582%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (22 samples, 0.08%)</title><rect x="56.0286%" y="213" width="0.0841%" height="15" fill="rgb(245,182,24)" fg:x="14661" fg:w="22"/><text x="56.2786%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (15 samples, 0.06%)</title><rect x="56.0553%" y="197" width="0.0573%" height="15" fill="rgb(242,14,37)" fg:x="14668" fg:w="15"/><text x="56.3053%" y="207.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (1,166 samples, 4.46%)</title><rect x="56.1127%" y="309" width="4.4560%" height="15" fill="rgb(246,228,12)" fg:x="14683" fg:w="1166"/><text x="56.3627%" y="319.50">&lt;dlx:..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (1,163 samples, 4.44%)</title><rect x="56.1241%" y="293" width="4.4445%" height="15" fill="rgb(213,55,15)" fg:x="14686" fg:w="1163"/><text x="56.3741%" y="303.50">dlx::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="60.6566%" y="293" width="0.0306%" height="15" fill="rgb(209,9,3)" fg:x="15872" fg:w="8"/><text x="60.9066%" y="303.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (5,121 samples, 19.57%)</title><rect x="60.6871%" y="293" width="19.5705%" height="15" fill="rgb(230,59,30)" fg:x="15880" fg:w="5121"/><text x="60.9371%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::cover_remai..</text></g><g><title>all (26,167 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="26167"/><text x="0.2500%" y="431.50"></text></g><g><title>xword_gen (26,167 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="26167"/><text x="0.2500%" y="415.50">xword_gen</text></g><g><title>clone3 (11,484 samples, 43.89%)</title><rect x="56.1127%" y="389" width="43.8873%" height="15" fill="rgb(232,18,1)" fg:x="14683" fg:w="11484"/><text x="56.3627%" y="399.50">clone3</text></g><g><title>start_thread (11,484 samples, 43.89%)</title><rect x="56.1127%" y="373" width="43.8873%" height="15" fill="rgb(215,41,42)" fg:x="14683" fg:w="11484"/><text x="56.3627%" y="383.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11,484 samples, 43.89%)</title><rect x="56.1127%" y="357" width="43.8873%" height="15" fill="rgb(224,123,36)" fg:x="14683" fg:w="11484"/><text x="56.3627%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11,484 samples, 43.89%)</title><rect x="56.1127%" y="341" width="43.8873%" height="15" fill="rgb(240,125,3)" fg:x="14683" fg:w="11484"/><text x="56.3627%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11,484 samples, 43.89%)</title><rect x="56.1127%" y="325" width="43.8873%" height="15" fill="rgb(205,98,50)" fg:x="14683" fg:w="11484"/><text x="56.3627%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,318 samples, 39.43%)</title><rect x="60.5687%" y="309" width="39.4313%" height="15" fill="rgb(205,185,37)" fg:x="15849" fg:w="10318"/><text x="60.8187%" y="319.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::trai..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (5,166 samples, 19.74%)</title><rect x="80.2576%" y="293" width="19.7424%" height="15" fill="rgb(238,207,15)" fg:x="21001" fg:w="5166"/><text x="80.5076%" y="303.50">dlx::dlx::Dlx&lt;I,N&gt;::uncover_rem..</text></g></svg></svg>