<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="19139"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (76 samples, 0.40%)</title><rect x="0.0052%" y="245" width="0.3971%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="76"/><text x="0.2552%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (471 samples, 2.46%)</title><rect x="0.4023%" y="245" width="2.4609%" height="15" fill="rgb(217,0,24)" fg:x="77" fg:w="471"/><text x="0.6523%" y="255.50">&lt;a..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (436 samples, 2.28%)</title><rect x="0.5852%" y="229" width="2.2781%" height="15" fill="rgb(221,193,54)" fg:x="112" fg:w="436"/><text x="0.8352%" y="239.50">x..</text></g><g><title>core::str::count::char_count_general_case (243 samples, 1.27%)</title><rect x="1.5936%" y="213" width="1.2697%" height="15" fill="rgb(248,212,6)" fg:x="305" fg:w="243"/><text x="1.8436%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="3.3858%" y="117" width="0.0209%" height="15" fill="rgb(208,68,35)" fg:x="648" fg:w="4"/><text x="3.6358%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.04%)</title><rect x="3.3805%" y="133" width="0.0418%" height="15" fill="rgb(232,128,0)" fg:x="647" fg:w="8"/><text x="3.6305%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.02%)</title><rect x="3.4067%" y="117" width="0.0157%" height="15" fill="rgb(207,160,47)" fg:x="652" fg:w="3"/><text x="3.6567%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="3.5007%" y="101" width="0.0157%" height="15" fill="rgb(228,23,34)" fg:x="670" fg:w="3"/><text x="3.7507%" y="111.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 0.22%)</title><rect x="3.2969%" y="165" width="0.2247%" height="15" fill="rgb(218,30,26)" fg:x="631" fg:w="43"/><text x="3.5469%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.21%)</title><rect x="3.3126%" y="149" width="0.2090%" height="15" fill="rgb(220,122,19)" fg:x="634" fg:w="40"/><text x="3.5626%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.10%)</title><rect x="3.4223%" y="133" width="0.0993%" height="15" fill="rgb(250,228,42)" fg:x="655" fg:w="19"/><text x="3.6723%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.05%)</title><rect x="3.4746%" y="117" width="0.0470%" height="15" fill="rgb(240,193,28)" fg:x="665" fg:w="9"/><text x="3.7246%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (44 samples, 0.23%)</title><rect x="3.2969%" y="197" width="0.2299%" height="15" fill="rgb(216,20,37)" fg:x="631" fg:w="44"/><text x="3.5469%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.23%)</title><rect x="3.2969%" y="181" width="0.2299%" height="15" fill="rgb(206,188,39)" fg:x="631" fg:w="44"/><text x="3.5469%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (803 samples, 4.20%)</title><rect x="34.2912%" y="165" width="4.1956%" height="15" fill="rgb(217,207,13)" fg:x="6563" fg:w="803"/><text x="34.5412%" y="175.50">&lt;core..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,833 samples, 35.70%)</title><rect x="3.5268%" y="197" width="35.7020%" height="15" fill="rgb(231,73,38)" fg:x="675" fg:w="6833"/><text x="3.7768%" y="207.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::trait..</text></g><g><title>core::hash::BuildHasher::hash_one (1,684 samples, 8.80%)</title><rect x="30.4300%" y="181" width="8.7988%" height="15" fill="rgb(225,20,46)" fg:x="5824" fg:w="1684"/><text x="30.6800%" y="191.50">core::hash::..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (142 samples, 0.74%)</title><rect x="38.4869%" y="165" width="0.7419%" height="15" fill="rgb(210,31,41)" fg:x="7366" fg:w="142"/><text x="38.7369%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition (3 samples, 0.02%)</title><rect x="39.2288%" y="197" width="0.0157%" height="15" fill="rgb(221,200,47)" fg:x="7508" fg:w="3"/><text x="39.4788%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.18%)</title><rect x="41.1829%" y="165" width="0.1829%" height="15" fill="rgb(226,26,5)" fg:x="7882" fg:w="35"/><text x="41.4329%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (80 samples, 0.42%)</title><rect x="40.9844%" y="181" width="0.4180%" height="15" fill="rgb(249,33,26)" fg:x="7844" fg:w="80"/><text x="41.2344%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.04%)</title><rect x="41.3658%" y="165" width="0.0366%" height="15" fill="rgb(235,183,28)" fg:x="7917" fg:w="7"/><text x="41.6158%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (44 samples, 0.23%)</title><rect x="41.9510%" y="149" width="0.2299%" height="15" fill="rgb(221,5,38)" fg:x="8029" fg:w="44"/><text x="42.2010%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,530 samples, 39.34%)</title><rect x="2.8789%" y="229" width="39.3437%" height="15" fill="rgb(247,18,42)" fg:x="551" fg:w="7530"/><text x="3.1289%" y="239.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iter..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (7,530 samples, 39.34%)</title><rect x="2.8789%" y="213" width="39.3437%" height="15" fill="rgb(241,131,45)" fg:x="551" fg:w="7530"/><text x="3.1289%" y="223.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (570 samples, 2.98%)</title><rect x="39.2445%" y="197" width="2.9782%" height="15" fill="rgb(249,31,29)" fg:x="7511" fg:w="570"/><text x="39.4945%" y="207.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (157 samples, 0.82%)</title><rect x="41.4024%" y="181" width="0.8203%" height="15" fill="rgb(225,111,53)" fg:x="7924" fg:w="157"/><text x="41.6524%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (88 samples, 0.46%)</title><rect x="41.7629%" y="165" width="0.4598%" height="15" fill="rgb(238,160,17)" fg:x="7993" fg:w="88"/><text x="42.0129%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.04%)</title><rect x="42.1809%" y="149" width="0.0418%" height="15" fill="rgb(214,148,48)" fg:x="8073" fg:w="8"/><text x="42.4309%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.04%)</title><rect x="42.4003%" y="181" width="0.0418%" height="15" fill="rgb(232,36,49)" fg:x="8115" fg:w="8"/><text x="42.6503%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7,573 samples, 39.57%)</title><rect x="2.8789%" y="245" width="39.5684%" height="15" fill="rgb(209,103,24)" fg:x="551" fg:w="7573"/><text x="3.1289%" y="255.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::trait..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (43 samples, 0.22%)</title><rect x="42.2227%" y="229" width="0.2247%" height="15" fill="rgb(229,88,8)" fg:x="8081" fg:w="43"/><text x="42.4727%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.19%)</title><rect x="42.2540%" y="213" width="0.1933%" height="15" fill="rgb(213,181,19)" fg:x="8087" fg:w="37"/><text x="42.5040%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.07%)</title><rect x="42.3794%" y="197" width="0.0679%" height="15" fill="rgb(254,191,54)" fg:x="8111" fg:w="13"/><text x="42.6294%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="42.6355%" y="213" width="0.0366%" height="15" fill="rgb(241,83,37)" fg:x="8160" fg:w="7"/><text x="42.8855%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.09%)</title><rect x="42.5884%" y="229" width="0.0888%" height="15" fill="rgb(233,36,39)" fg:x="8151" fg:w="17"/><text x="42.8384%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="42.8027%" y="197" width="0.0104%" height="15" fill="rgb(226,3,54)" fg:x="8192" fg:w="2"/><text x="43.0527%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (70 samples, 0.37%)</title><rect x="42.4526%" y="245" width="0.3657%" height="15" fill="rgb(245,192,40)" fg:x="8125" fg:w="70"/><text x="42.7026%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.14%)</title><rect x="42.6773%" y="229" width="0.1411%" height="15" fill="rgb(238,167,29)" fg:x="8168" fg:w="27"/><text x="42.9273%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.06%)</title><rect x="42.7609%" y="213" width="0.0575%" height="15" fill="rgb(232,182,51)" fg:x="8184" fg:w="11"/><text x="43.0109%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.10%)</title><rect x="42.9803%" y="197" width="0.1045%" height="15" fill="rgb(231,60,39)" fg:x="8226" fg:w="20"/><text x="43.2303%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (54 samples, 0.28%)</title><rect x="42.8183%" y="245" width="0.2821%" height="15" fill="rgb(208,69,12)" fg:x="8195" fg:w="54"/><text x="43.0683%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (42 samples, 0.22%)</title><rect x="42.8810%" y="229" width="0.2194%" height="15" fill="rgb(235,93,37)" fg:x="8207" fg:w="42"/><text x="43.1310%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30 samples, 0.16%)</title><rect x="42.9437%" y="213" width="0.1567%" height="15" fill="rgb(213,116,39)" fg:x="8219" fg:w="30"/><text x="43.1937%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.02%)</title><rect x="43.0848%" y="197" width="0.0157%" height="15" fill="rgb(222,207,29)" fg:x="8246" fg:w="3"/><text x="43.3348%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (570 samples, 2.98%)</title><rect x="48.0589%" y="149" width="2.9782%" height="15" fill="rgb(206,96,30)" fg:x="9198" fg:w="570"/><text x="48.3089%" y="159.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (80 samples, 0.42%)</title><rect x="50.6192%" y="133" width="0.4180%" height="15" fill="rgb(218,138,4)" fg:x="9688" fg:w="80"/><text x="50.8692%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.15%)</title><rect x="50.8856%" y="117" width="0.1515%" height="15" fill="rgb(250,191,14)" fg:x="9739" fg:w="29"/><text x="51.1356%" y="127.50"></text></g><g><title>__rdl_realloc (9 samples, 0.05%)</title><rect x="50.9901%" y="101" width="0.0470%" height="15" fill="rgb(239,60,40)" fg:x="9759" fg:w="9"/><text x="51.2401%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.06%)</title><rect x="51.1103%" y="133" width="0.0575%" height="15" fill="rgb(206,27,48)" fg:x="9782" fg:w="11"/><text x="51.3603%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.14%)</title><rect x="51.0424%" y="149" width="0.1411%" height="15" fill="rgb(225,35,8)" fg:x="9769" fg:w="27"/><text x="51.2924%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.02%)</title><rect x="51.1678%" y="133" width="0.0157%" height="15" fill="rgb(250,213,24)" fg:x="9793" fg:w="3"/><text x="51.4178%" y="143.50"></text></g><g><title>core::str::count::char_count_general_case (27 samples, 0.14%)</title><rect x="51.1834%" y="149" width="0.1411%" height="15" fill="rgb(247,123,22)" fg:x="9796" fg:w="27"/><text x="51.4334%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (199 samples, 1.04%)</title><rect x="57.9915%" y="117" width="1.0398%" height="15" fill="rgb(231,138,38)" fg:x="11099" fg:w="199"/><text x="58.2415%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,839 samples, 14.83%)</title><rect x="44.5269%" y="165" width="14.8336%" height="15" fill="rgb(231,145,46)" fg:x="8522" fg:w="2839"/><text x="44.7769%" y="175.50">core::ops::function::im..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,538 samples, 8.04%)</title><rect x="51.3245%" y="149" width="8.0359%" height="15" fill="rgb(251,118,11)" fg:x="9823" fg:w="1538"/><text x="51.5745%" y="159.50">xword_gen::..</text></g><g><title>core::hash::BuildHasher::hash_one (743 samples, 3.88%)</title><rect x="55.4783%" y="133" width="3.8821%" height="15" fill="rgb(217,147,25)" fg:x="10618" fg:w="743"/><text x="55.7283%" y="143.50">core..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (63 samples, 0.33%)</title><rect x="59.0313%" y="117" width="0.3292%" height="15" fill="rgb(247,81,37)" fg:x="11298" fg:w="63"/><text x="59.2813%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,111 samples, 16.25%)</title><rect x="43.7431%" y="197" width="16.2548%" height="15" fill="rgb(209,12,38)" fg:x="8372" fg:w="3111"/><text x="43.9931%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,027 samples, 15.82%)</title><rect x="44.1820%" y="181" width="15.8159%" height="15" fill="rgb(227,1,9)" fg:x="8456" fg:w="3027"/><text x="44.4320%" y="191.50">&lt;core::iter::adapters::f..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (122 samples, 0.64%)</title><rect x="59.3605%" y="165" width="0.6374%" height="15" fill="rgb(248,47,43)" fg:x="11361" fg:w="122"/><text x="59.6105%" y="175.50"></text></g><g><title>core::str::count::char_count_general_case (75 samples, 0.39%)</title><rect x="59.6060%" y="149" width="0.3919%" height="15" fill="rgb(221,10,30)" fg:x="11408" fg:w="75"/><text x="59.8560%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,235 samples, 16.90%)</title><rect x="43.1005%" y="229" width="16.9027%" height="15" fill="rgb(210,229,1)" fg:x="8249" fg:w="3235"/><text x="43.3505%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,118 samples, 16.29%)</title><rect x="43.7118%" y="213" width="16.2913%" height="15" fill="rgb(222,148,37)" fg:x="8366" fg:w="3118"/><text x="43.9618%" y="223.50">&lt;core::iter::adapters::fl..</text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.02%)</title><rect x="60.4786%" y="197" width="0.0157%" height="15" fill="rgb(234,67,33)" fg:x="11575" fg:w="3"/><text x="60.7286%" y="207.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (2 samples, 0.01%)</title><rect x="60.5831%" y="181" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="11595" fg:w="2"/><text x="60.8331%" y="191.50"></text></g><g><title>core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="60.7503%" y="149" width="0.0104%" height="15" fill="rgb(247,138,52)" fg:x="11627" fg:w="2"/><text x="61.0003%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (4 samples, 0.02%)</title><rect x="60.7608%" y="149" width="0.0209%" height="15" fill="rgb(213,79,30)" fg:x="11629" fg:w="4"/><text x="61.0108%" y="159.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (11 samples, 0.06%)</title><rect x="60.8757%" y="133" width="0.0575%" height="15" fill="rgb(246,177,23)" fg:x="11651" fg:w="11"/><text x="61.1257%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.07%)</title><rect x="61.0063%" y="117" width="0.0679%" height="15" fill="rgb(230,62,27)" fg:x="11676" fg:w="13"/><text x="61.2563%" y="127.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (9 samples, 0.05%)</title><rect x="61.1474%" y="101" width="0.0470%" height="15" fill="rgb(216,154,8)" fg:x="11703" fg:w="9"/><text x="61.3974%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.04%)</title><rect x="61.2310%" y="85" width="0.0418%" height="15" fill="rgb(244,35,45)" fg:x="11719" fg:w="8"/><text x="61.4810%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (6 samples, 0.03%)</title><rect x="61.2832%" y="69" width="0.0313%" height="15" fill="rgb(251,115,12)" fg:x="11729" fg:w="6"/><text x="61.5332%" y="79.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3 samples, 0.02%)</title><rect x="61.3250%" y="37" width="0.0157%" height="15" fill="rgb(240,54,50)" fg:x="11737" fg:w="3"/><text x="61.5750%" y="47.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (3,492 samples, 18.25%)</title><rect x="43.1005%" y="245" width="18.2455%" height="15" fill="rgb(233,84,52)" fg:x="8249" fg:w="3492"/><text x="43.3505%" y="255.50">itertools::Itertools::sorted..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (257 samples, 1.34%)</title><rect x="60.0031%" y="229" width="1.3428%" height="15" fill="rgb(207,117,47)" fg:x="11484" fg:w="257"/><text x="60.2531%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (200 samples, 1.04%)</title><rect x="60.3010%" y="213" width="1.0450%" height="15" fill="rgb(249,43,39)" fg:x="11541" fg:w="200"/><text x="60.5510%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (163 samples, 0.85%)</title><rect x="60.4943%" y="197" width="0.8517%" height="15" fill="rgb(209,38,44)" fg:x="11578" fg:w="163"/><text x="60.7443%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (144 samples, 0.75%)</title><rect x="60.5936%" y="181" width="0.7524%" height="15" fill="rgb(236,212,23)" fg:x="11597" fg:w="144"/><text x="60.8436%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (127 samples, 0.66%)</title><rect x="60.6824%" y="165" width="0.6636%" height="15" fill="rgb(242,79,21)" fg:x="11614" fg:w="127"/><text x="60.9324%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (108 samples, 0.56%)</title><rect x="60.7817%" y="149" width="0.5643%" height="15" fill="rgb(211,96,35)" fg:x="11633" fg:w="108"/><text x="61.0317%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (79 samples, 0.41%)</title><rect x="60.9332%" y="133" width="0.4128%" height="15" fill="rgb(253,215,40)" fg:x="11662" fg:w="79"/><text x="61.1832%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (52 samples, 0.27%)</title><rect x="61.0742%" y="117" width="0.2717%" height="15" fill="rgb(211,81,21)" fg:x="11689" fg:w="52"/><text x="61.3242%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (29 samples, 0.15%)</title><rect x="61.1944%" y="101" width="0.1515%" height="15" fill="rgb(208,190,38)" fg:x="11712" fg:w="29"/><text x="61.4444%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (14 samples, 0.07%)</title><rect x="61.2728%" y="85" width="0.0731%" height="15" fill="rgb(235,213,38)" fg:x="11727" fg:w="14"/><text x="61.5228%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.03%)</title><rect x="61.3146%" y="69" width="0.0313%" height="15" fill="rgb(237,122,38)" fg:x="11735" fg:w="6"/><text x="61.5646%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (4 samples, 0.02%)</title><rect x="61.3250%" y="53" width="0.0209%" height="15" fill="rgb(244,218,35)" fg:x="11737" fg:w="4"/><text x="61.5750%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.15%)</title><rect x="62.0879%" y="213" width="0.1515%" height="15" fill="rgb(240,68,47)" fg:x="11883" fg:w="29"/><text x="62.3379%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.45%)</title><rect x="61.8266%" y="229" width="0.4546%" height="15" fill="rgb(210,16,53)" fg:x="11833" fg:w="87"/><text x="62.0766%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.04%)</title><rect x="62.2394%" y="213" width="0.0418%" height="15" fill="rgb(235,124,12)" fg:x="11912" fg:w="8"/><text x="62.4894%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="62.2812%" y="229" width="0.0104%" height="15" fill="rgb(224,169,11)" fg:x="11920" fg:w="2"/><text x="62.5312%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.04%)</title><rect x="62.4275%" y="197" width="0.0418%" height="15" fill="rgb(250,166,2)" fg:x="11948" fg:w="8"/><text x="62.6775%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (215 samples, 1.12%)</title><rect x="61.3512%" y="245" width="1.1234%" height="15" fill="rgb(242,216,29)" fg:x="11742" fg:w="215"/><text x="61.6012%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (35 samples, 0.18%)</title><rect x="62.2917%" y="229" width="0.1829%" height="15" fill="rgb(230,116,27)" fg:x="11922" fg:w="35"/><text x="62.5417%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.09%)</title><rect x="62.3857%" y="213" width="0.0888%" height="15" fill="rgb(228,99,48)" fg:x="11940" fg:w="17"/><text x="62.6357%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 0.16%)</title><rect x="62.4798%" y="229" width="0.1620%" height="15" fill="rgb(253,11,6)" fg:x="11958" fg:w="31"/><text x="62.7298%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.13%)</title><rect x="62.5111%" y="213" width="0.1306%" height="15" fill="rgb(247,143,39)" fg:x="11964" fg:w="25"/><text x="62.7611%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.11%)</title><rect x="62.5320%" y="197" width="0.1097%" height="15" fill="rgb(236,97,10)" fg:x="11968" fg:w="21"/><text x="62.7820%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="62.8037%" y="197" width="0.0209%" height="15" fill="rgb(233,208,19)" fg:x="12020" fg:w="4"/><text x="63.0537%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.07%)</title><rect x="62.7619%" y="213" width="0.0679%" height="15" fill="rgb(216,164,2)" fg:x="12012" fg:w="13"/><text x="63.0119%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.29%)</title><rect x="62.6417%" y="229" width="0.2926%" height="15" fill="rgb(220,129,5)" fg:x="11989" fg:w="56"/><text x="62.8917%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.10%)</title><rect x="62.8298%" y="213" width="0.1045%" height="15" fill="rgb(242,17,10)" fg:x="12025" fg:w="20"/><text x="63.0798%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.06%)</title><rect x="62.8716%" y="197" width="0.0627%" height="15" fill="rgb(242,107,0)" fg:x="12033" fg:w="12"/><text x="63.1216%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.03%)</title><rect x="62.9030%" y="181" width="0.0313%" height="15" fill="rgb(251,28,31)" fg:x="12039" fg:w="6"/><text x="63.1530%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.08%)</title><rect x="63.4620%" y="197" width="0.0784%" height="15" fill="rgb(233,223,10)" fg:x="12146" fg:w="15"/><text x="63.7120%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (52 samples, 0.27%)</title><rect x="63.3053%" y="213" width="0.2717%" height="15" fill="rgb(215,21,27)" fg:x="12116" fg:w="52"/><text x="63.5553%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.04%)</title><rect x="63.5404%" y="197" width="0.0366%" height="15" fill="rgb(232,23,21)" fg:x="12161" fg:w="7"/><text x="63.7904%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (2 samples, 0.01%)</title><rect x="63.5770%" y="213" width="0.0104%" height="15" fill="rgb(244,5,23)" fg:x="12168" fg:w="2"/><text x="63.8270%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (215 samples, 1.12%)</title><rect x="62.4745%" y="245" width="1.1234%" height="15" fill="rgb(226,81,46)" fg:x="11957" fg:w="215"/><text x="62.7245%" y="255.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (127 samples, 0.66%)</title><rect x="62.9343%" y="229" width="0.6636%" height="15" fill="rgb(247,70,30)" fg:x="12045" fg:w="127"/><text x="63.1843%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="63.5874%" y="213" width="0.0104%" height="15" fill="rgb(212,68,19)" fg:x="12170" fg:w="2"/><text x="63.8374%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.10%)</title><rect x="63.5979%" y="229" width="0.1045%" height="15" fill="rgb(240,187,13)" fg:x="12172" fg:w="20"/><text x="63.8479%" y="239.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (15 samples, 0.08%)</title><rect x="63.6240%" y="213" width="0.0784%" height="15" fill="rgb(223,113,26)" fg:x="12177" fg:w="15"/><text x="63.8740%" y="223.50"></text></g><g><title>core::str::count::char_count_general_case (8 samples, 0.04%)</title><rect x="63.6606%" y="197" width="0.0418%" height="15" fill="rgb(206,192,2)" fg:x="12184" fg:w="8"/><text x="63.9106%" y="207.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (3 samples, 0.02%)</title><rect x="63.7024%" y="229" width="0.0157%" height="15" fill="rgb(241,108,4)" fg:x="12192" fg:w="3"/><text x="63.9524%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="63.7076%" y="213" width="0.0104%" height="15" fill="rgb(247,173,49)" fg:x="12193" fg:w="2"/><text x="63.9576%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.03%)</title><rect x="63.7181%" y="229" width="0.0261%" height="15" fill="rgb(224,114,35)" fg:x="12195" fg:w="5"/><text x="63.9681%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="63.7337%" y="213" width="0.0104%" height="15" fill="rgb(245,159,27)" fg:x="12198" fg:w="2"/><text x="63.9837%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.08%)</title><rect x="64.3346%" y="117" width="0.0836%" height="15" fill="rgb(245,172,44)" fg:x="12313" fg:w="16"/><text x="64.5846%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (52 samples, 0.27%)</title><rect x="64.1622%" y="133" width="0.2717%" height="15" fill="rgb(236,23,11)" fg:x="12280" fg:w="52"/><text x="64.4122%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.02%)</title><rect x="64.4182%" y="117" width="0.0157%" height="15" fill="rgb(205,117,38)" fg:x="12329" fg:w="3"/><text x="64.6682%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (113 samples, 0.59%)</title><rect x="63.8487%" y="149" width="0.5904%" height="15" fill="rgb(237,72,25)" fg:x="12220" fg:w="113"/><text x="64.0987%" y="159.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (309 samples, 1.61%)</title><rect x="63.7442%" y="229" width="1.6145%" height="15" fill="rgb(244,70,9)" fg:x="12200" fg:w="309"/><text x="63.9942%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (309 samples, 1.61%)</title><rect x="63.7442%" y="213" width="1.6145%" height="15" fill="rgb(217,125,39)" fg:x="12200" fg:w="309"/><text x="63.9942%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (309 samples, 1.61%)</title><rect x="63.7442%" y="197" width="1.6145%" height="15" fill="rgb(235,36,10)" fg:x="12200" fg:w="309"/><text x="63.9942%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (309 samples, 1.61%)</title><rect x="63.7442%" y="181" width="1.6145%" height="15" fill="rgb(251,123,47)" fg:x="12200" fg:w="309"/><text x="63.9942%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (309 samples, 1.61%)</title><rect x="63.7442%" y="165" width="1.6145%" height="15" fill="rgb(221,13,13)" fg:x="12200" fg:w="309"/><text x="63.9942%" y="175.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (176 samples, 0.92%)</title><rect x="64.4391%" y="149" width="0.9196%" height="15" fill="rgb(238,131,9)" fg:x="12333" fg:w="176"/><text x="64.6891%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (123 samples, 0.64%)</title><rect x="64.7160%" y="133" width="0.6427%" height="15" fill="rgb(211,50,8)" fg:x="12386" fg:w="123"/><text x="64.9660%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.04%)</title><rect x="65.3691%" y="213" width="0.0366%" height="15" fill="rgb(245,182,24)" fg:x="12511" fg:w="7"/><text x="65.6191%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="65.3796%" y="197" width="0.0261%" height="15" fill="rgb(242,14,37)" fg:x="12513" fg:w="5"/><text x="65.6296%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (10 samples, 0.05%)</title><rect x="65.3587%" y="229" width="0.0522%" height="15" fill="rgb(246,228,12)" fg:x="12509" fg:w="10"/><text x="65.6087%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.03%)</title><rect x="65.4109%" y="213" width="0.0261%" height="15" fill="rgb(213,55,15)" fg:x="12519" fg:w="5"/><text x="65.6609%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="65.4109%" y="197" width="0.0261%" height="15" fill="rgb(209,9,3)" fg:x="12519" fg:w="5"/><text x="65.6609%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="65.4214%" y="181" width="0.0157%" height="15" fill="rgb(230,59,30)" fg:x="12521" fg:w="3"/><text x="65.6714%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.04%)</title><rect x="65.4371%" y="213" width="0.0366%" height="15" fill="rgb(209,121,21)" fg:x="12524" fg:w="7"/><text x="65.6871%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.03%)</title><rect x="65.4475%" y="197" width="0.0261%" height="15" fill="rgb(220,109,13)" fg:x="12526" fg:w="5"/><text x="65.6975%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="65.4632%" y="181" width="0.0104%" height="15" fill="rgb(232,18,1)" fg:x="12529" fg:w="2"/><text x="65.7132%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="65.4632%" y="165" width="0.0104%" height="15" fill="rgb(215,41,42)" fg:x="12529" fg:w="2"/><text x="65.7132%" y="175.50"></text></g><g><title>_start (12,543 samples, 65.54%)</title><rect x="0.0000%" y="405" width="65.5363%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="415.50">_start</text></g><g><title>__libc_start_main_impl (12,543 samples, 65.54%)</title><rect x="0.0000%" y="389" width="65.5363%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="399.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (12,543 samples, 65.54%)</title><rect x="0.0000%" y="373" width="65.5363%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="383.50">__libc_start_call_main</text></g><g><title>main (12,543 samples, 65.54%)</title><rect x="0.0000%" y="357" width="65.5363%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (12,543 samples, 65.54%)</title><rect x="0.0000%" y="341" width="65.5363%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (12,543 samples, 65.54%)</title><rect x="0.0000%" y="325" width="65.5363%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (12,543 samples, 65.54%)</title><rect x="0.0000%" y="309" width="65.5363%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (12,543 samples, 65.54%)</title><rect x="0.0000%" y="293" width="65.5363%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="303.50">xword_gen::main</text></g><g><title>util::time::time_fn (12,543 samples, 65.54%)</title><rect x="0.0000%" y="277" width="65.5363%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="287.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (12,543 samples, 65.54%)</title><rect x="0.0000%" y="261" width="65.5363%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="12543"/><text x="0.2500%" y="271.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (371 samples, 1.94%)</title><rect x="63.5979%" y="245" width="1.9385%" height="15" fill="rgb(247,202,23)" fg:x="12172" fg:w="371"/><text x="63.8479%" y="255.50">x..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (24 samples, 0.13%)</title><rect x="65.4109%" y="229" width="0.1254%" height="15" fill="rgb(219,102,11)" fg:x="12519" fg:w="24"/><text x="65.6609%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (12 samples, 0.06%)</title><rect x="65.4736%" y="213" width="0.0627%" height="15" fill="rgb(243,110,44)" fg:x="12531" fg:w="12"/><text x="65.7236%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.04%)</title><rect x="65.4945%" y="197" width="0.0418%" height="15" fill="rgb(222,74,54)" fg:x="12535" fg:w="8"/><text x="65.7445%" y="207.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (1,104 samples, 5.77%)</title><rect x="65.5363%" y="325" width="5.7683%" height="15" fill="rgb(216,99,12)" fg:x="12543" fg:w="1104"/><text x="65.7863%" y="335.50">&lt;dlx::d..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (1,101 samples, 5.75%)</title><rect x="65.5520%" y="309" width="5.7527%" height="15" fill="rgb(226,22,26)" fg:x="12546" fg:w="1101"/><text x="65.8020%" y="319.50">dlx::dl..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (8 samples, 0.04%)</title><rect x="71.3778%" y="309" width="0.0418%" height="15" fill="rgb(217,163,10)" fg:x="13661" fg:w="8"/><text x="71.6278%" y="319.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (2,781 samples, 14.53%)</title><rect x="71.4196%" y="309" width="14.5305%" height="15" fill="rgb(213,25,53)" fg:x="13669" fg:w="2781"/><text x="71.6696%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::co..</text></g><g><title>all (19,139 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="19139"/><text x="0.2500%" y="447.50"></text></g><g><title>xword_gen (19,139 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="19139"/><text x="0.2500%" y="431.50">xword_gen</text></g><g><title>clone3 (6,596 samples, 34.46%)</title><rect x="65.5363%" y="405" width="34.4637%" height="15" fill="rgb(229,68,48)" fg:x="12543" fg:w="6596"/><text x="65.7863%" y="415.50">clone3</text></g><g><title>start_thread (6,596 samples, 34.46%)</title><rect x="65.5363%" y="389" width="34.4637%" height="15" fill="rgb(252,8,32)" fg:x="12543" fg:w="6596"/><text x="65.7863%" y="399.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (6,596 samples, 34.46%)</title><rect x="65.5363%" y="373" width="34.4637%" height="15" fill="rgb(223,20,43)" fg:x="12543" fg:w="6596"/><text x="65.7863%" y="383.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,596 samples, 34.46%)</title><rect x="65.5363%" y="357" width="34.4637%" height="15" fill="rgb(229,81,49)" fg:x="12543" fg:w="6596"/><text x="65.7863%" y="367.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,596 samples, 34.46%)</title><rect x="65.5363%" y="341" width="34.4637%" height="15" fill="rgb(236,28,36)" fg:x="12543" fg:w="6596"/><text x="65.7863%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,492 samples, 28.70%)</title><rect x="71.3047%" y="325" width="28.6953%" height="15" fill="rgb(249,185,26)" fg:x="13647" fg:w="5492"/><text x="71.5547%" y="335.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; a..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (2,689 samples, 14.05%)</title><rect x="85.9502%" y="309" width="14.0498%" height="15" fill="rgb(249,174,33)" fg:x="16450" fg:w="2689"/><text x="86.2002%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::u..</text></g></svg></svg>