<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="38811"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (77 samples, 0.20%)</title><rect x="0.0077%" y="245" width="0.1984%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="77"/><text x="0.2577%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (421 samples, 1.08%)</title><rect x="0.2061%" y="245" width="1.0847%" height="15" fill="rgb(217,0,24)" fg:x="80" fg:w="421"/><text x="0.4561%" y="255.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (377 samples, 0.97%)</title><rect x="0.3195%" y="229" width="0.9714%" height="15" fill="rgb(221,193,54)" fg:x="124" fg:w="377"/><text x="0.5695%" y="239.50"></text></g><g><title>core::str::count::char_count_general_case (233 samples, 0.60%)</title><rect x="0.6905%" y="213" width="0.6003%" height="15" fill="rgb(248,212,6)" fg:x="268" fg:w="233"/><text x="0.9405%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.01%)</title><rect x="1.5820%" y="133" width="0.0103%" height="15" fill="rgb(208,68,35)" fg:x="614" fg:w="4"/><text x="1.8320%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.12%)</title><rect x="1.5331%" y="165" width="0.1211%" height="15" fill="rgb(232,128,0)" fg:x="595" fg:w="47"/><text x="1.7831%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.11%)</title><rect x="1.5460%" y="149" width="0.1082%" height="15" fill="rgb(207,160,47)" fg:x="600" fg:w="42"/><text x="1.7960%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.06%)</title><rect x="1.5923%" y="133" width="0.0618%" height="15" fill="rgb(228,23,34)" fg:x="618" fg:w="24"/><text x="1.8423%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.03%)</title><rect x="1.6233%" y="117" width="0.0309%" height="15" fill="rgb(218,30,26)" fg:x="630" fg:w="12"/><text x="1.8733%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (48 samples, 0.12%)</title><rect x="1.5331%" y="197" width="0.1237%" height="15" fill="rgb(220,122,19)" fg:x="595" fg:w="48"/><text x="1.7831%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (48 samples, 0.12%)</title><rect x="1.5331%" y="181" width="0.1237%" height="15" fill="rgb(250,228,42)" fg:x="595" fg:w="48"/><text x="1.7831%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (840 samples, 2.16%)</title><rect x="18.2912%" y="165" width="2.1643%" height="15" fill="rgb(240,193,28)" fg:x="7099" fg:w="840"/><text x="18.5412%" y="175.50">&lt;..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,483 samples, 19.28%)</title><rect x="1.6567%" y="197" width="19.2806%" height="15" fill="rgb(216,20,37)" fg:x="643" fg:w="7483"/><text x="1.9067%" y="207.50">&lt;alloc::vec::into_iter::IntoIt..</text></g><g><title>core::hash::BuildHasher::hash_one (1,808 samples, 4.66%)</title><rect x="16.2789%" y="181" width="4.6585%" height="15" fill="rgb(206,188,39)" fg:x="6318" fg:w="1808"/><text x="16.5289%" y="191.50">core:..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (187 samples, 0.48%)</title><rect x="20.4555%" y="165" width="0.4818%" height="15" fill="rgb(217,207,13)" fg:x="7939" fg:w="187"/><text x="20.7055%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition (4 samples, 0.01%)</title><rect x="20.9374%" y="197" width="0.0103%" height="15" fill="rgb(231,73,38)" fg:x="8126" fg:w="4"/><text x="21.1874%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (38 samples, 0.10%)</title><rect x="21.9603%" y="165" width="0.0979%" height="15" fill="rgb(225,20,46)" fg:x="8523" fg:w="38"/><text x="22.2103%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (78 samples, 0.20%)</title><rect x="21.8727%" y="181" width="0.2010%" height="15" fill="rgb(210,31,41)" fg:x="8489" fg:w="78"/><text x="22.1227%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.02%)</title><rect x="22.0582%" y="165" width="0.0155%" height="15" fill="rgb(221,200,47)" fg:x="8561" fg:w="6"/><text x="22.3082%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (57 samples, 0.15%)</title><rect x="22.3158%" y="149" width="0.1469%" height="15" fill="rgb(226,26,5)" fg:x="8661" fg:w="57"/><text x="22.5658%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,228 samples, 21.20%)</title><rect x="1.2986%" y="229" width="21.2002%" height="15" fill="rgb(249,33,26)" fg:x="504" fg:w="8228"/><text x="1.5486%" y="239.50">&lt;core::iter::adapters::map::Map&lt;I..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::construct (8,228 samples, 21.20%)</title><rect x="1.2986%" y="213" width="21.2002%" height="15" fill="rgb(235,183,28)" fg:x="504" fg:w="8228"/><text x="1.5486%" y="223.50">dlx::dlx::Dlx&lt;I,N&gt;::construct</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (602 samples, 1.55%)</title><rect x="20.9477%" y="197" width="1.5511%" height="15" fill="rgb(221,5,38)" fg:x="8130" fg:w="602"/><text x="21.1977%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (165 samples, 0.43%)</title><rect x="22.0736%" y="181" width="0.4251%" height="15" fill="rgb(247,18,42)" fg:x="8567" fg:w="165"/><text x="22.3236%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (114 samples, 0.29%)</title><rect x="22.2050%" y="165" width="0.2937%" height="15" fill="rgb(241,131,45)" fg:x="8618" fg:w="114"/><text x="22.4550%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.04%)</title><rect x="22.4627%" y="149" width="0.0361%" height="15" fill="rgb(249,31,29)" fg:x="8718" fg:w="14"/><text x="22.7127%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.02%)</title><rect x="22.5761%" y="181" width="0.0155%" height="15" fill="rgb(225,111,53)" fg:x="8762" fg:w="6"/><text x="22.8261%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8,265 samples, 21.30%)</title><rect x="1.2986%" y="245" width="21.2955%" height="15" fill="rgb(238,160,17)" fg:x="504" fg:w="8265"/><text x="1.5486%" y="255.50">&lt;std::collections::hash::map::Hash..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (37 samples, 0.10%)</title><rect x="22.4988%" y="229" width="0.0953%" height="15" fill="rgb(214,148,48)" fg:x="8732" fg:w="37"/><text x="22.7488%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.09%)</title><rect x="22.5065%" y="213" width="0.0876%" height="15" fill="rgb(232,36,49)" fg:x="8735" fg:w="34"/><text x="22.7565%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.03%)</title><rect x="22.5606%" y="197" width="0.0335%" height="15" fill="rgb(209,103,24)" fg:x="8756" fg:w="13"/><text x="22.8106%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.04%)</title><rect x="22.6431%" y="197" width="0.0386%" height="15" fill="rgb(229,88,8)" fg:x="8788" fg:w="15"/><text x="22.8931%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (34 samples, 0.09%)</title><rect x="22.5967%" y="245" width="0.0876%" height="15" fill="rgb(213,181,19)" fg:x="8770" fg:w="34"/><text x="22.8467%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (30 samples, 0.08%)</title><rect x="22.6070%" y="229" width="0.0773%" height="15" fill="rgb(254,191,54)" fg:x="8774" fg:w="30"/><text x="22.8570%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.05%)</title><rect x="22.6302%" y="213" width="0.0541%" height="15" fill="rgb(241,83,37)" fg:x="8783" fg:w="21"/><text x="22.8802%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (632 samples, 1.63%)</title><rect x="24.9826%" y="149" width="1.6284%" height="15" fill="rgb(233,36,39)" fg:x="9696" fg:w="632"/><text x="25.2326%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (96 samples, 0.25%)</title><rect x="26.3637%" y="133" width="0.2474%" height="15" fill="rgb(226,3,54)" fg:x="10232" fg:w="96"/><text x="26.6137%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 0.09%)</title><rect x="26.5208%" y="117" width="0.0902%" height="15" fill="rgb(245,192,40)" fg:x="10293" fg:w="35"/><text x="26.7708%" y="127.50"></text></g><g><title>__rdl_realloc (12 samples, 0.03%)</title><rect x="26.5801%" y="101" width="0.0309%" height="15" fill="rgb(238,167,29)" fg:x="10316" fg:w="12"/><text x="26.8301%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.03%)</title><rect x="26.7991%" y="133" width="0.0258%" height="15" fill="rgb(232,182,51)" fg:x="10401" fg:w="10"/><text x="27.0491%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.21%)</title><rect x="26.6136%" y="149" width="0.2139%" height="15" fill="rgb(231,60,39)" fg:x="10329" fg:w="83"/><text x="26.8636%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (32 samples, 0.08%)</title><rect x="26.8274%" y="149" width="0.0825%" height="15" fill="rgb(208,69,12)" fg:x="10412" fg:w="32"/><text x="27.0774%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (209 samples, 0.54%)</title><rect x="30.4604%" y="117" width="0.5385%" height="15" fill="rgb(235,93,37)" fg:x="11822" fg:w="209"/><text x="30.7104%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,030 samples, 7.81%)</title><rect x="23.3594%" y="165" width="7.8071%" height="15" fill="rgb(213,116,39)" fg:x="9066" fg:w="3030"/><text x="23.6094%" y="175.50">core::ops::..</text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::likelihood (1,652 samples, 4.26%)</title><rect x="26.9099%" y="149" width="4.2565%" height="15" fill="rgb(222,207,29)" fg:x="10444" fg:w="1652"/><text x="27.1599%" y="159.50">xword..</text></g><g><title>core::hash::BuildHasher::hash_one (788 samples, 2.03%)</title><rect x="29.1361%" y="133" width="2.0304%" height="15" fill="rgb(206,96,30)" fg:x="11308" fg:w="788"/><text x="29.3861%" y="143.50">c..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (65 samples, 0.17%)</title><rect x="30.9989%" y="117" width="0.1675%" height="15" fill="rgb(218,138,4)" fg:x="12031" fg:w="65"/><text x="31.2489%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,285 samples, 8.46%)</title><rect x="23.0064%" y="197" width="8.4641%" height="15" fill="rgb(250,191,14)" fg:x="8929" fg:w="3285"/><text x="23.2564%" y="207.50">&lt;alloc::vec:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,199 samples, 8.24%)</title><rect x="23.2280%" y="181" width="8.2425%" height="15" fill="rgb(239,60,40)" fg:x="9015" fg:w="3199"/><text x="23.4780%" y="191.50">&lt;core::iter..</text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (118 samples, 0.30%)</title><rect x="31.1664%" y="165" width="0.3040%" height="15" fill="rgb(206,27,48)" fg:x="12096" fg:w="118"/><text x="31.4164%" y="175.50"></text></g><g><title>core::str::count::char_count_general_case (66 samples, 0.17%)</title><rect x="31.3004%" y="149" width="0.1701%" height="15" fill="rgb(225,35,8)" fg:x="12148" fg:w="66"/><text x="31.5504%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,417 samples, 8.80%)</title><rect x="22.6843%" y="229" width="8.8042%" height="15" fill="rgb(250,213,24)" fg:x="8804" fg:w="3417"/><text x="22.9343%" y="239.50">&lt;alloc::vec:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,299 samples, 8.50%)</title><rect x="22.9883%" y="213" width="8.5002%" height="15" fill="rgb(247,123,22)" fg:x="8922" fg:w="3299"/><text x="23.2383%" y="223.50">&lt;core::iter:..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::build_word_assignments_from_entries&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::scan::Scan&lt;core::ops::range::Range&lt;u32&gt;,u32,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iterate_board_row_clues&lt;&amp;util::grid::Grid&lt;xword_gen::xword::XWordTile&gt;&gt;::{{closure}}&gt;&gt;,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iter_board_entries::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::scan::Scan&lt;core::ops::range::Range&lt;u32&gt;,u32,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iterate_board_row_clues&lt;util::grid::TransposeGrid&lt;xword_gen::xword::XWordTile&gt;&gt;::{{closure}}&gt;&gt;,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iterate_col_clues::{{closure}}&gt;,&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordInternal&gt;::iter_board_entries::{{closure}}&gt;&gt;&gt;::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="31.4782%" y="197" width="0.0103%" height="15" fill="rgb(231,138,38)" fg:x="12217" fg:w="4"/><text x="31.7282%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="31.4782%" y="181" width="0.0103%" height="15" fill="rgb(231,145,46)" fg:x="12217" fg:w="4"/><text x="31.7282%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="31.4782%" y="165" width="0.0103%" height="15" fill="rgb(251,118,11)" fg:x="12217" fg:w="4"/><text x="31.7282%" y="175.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (6 samples, 0.02%)</title><rect x="31.9497%" y="133" width="0.0155%" height="15" fill="rgb(217,147,25)" fg:x="12400" fg:w="6"/><text x="32.1997%" y="143.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13 samples, 0.03%)</title><rect x="32.0450%" y="101" width="0.0335%" height="15" fill="rgb(247,81,37)" fg:x="12437" fg:w="13"/><text x="32.2950%" y="111.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.02%)</title><rect x="32.0966%" y="85" width="0.0206%" height="15" fill="rgb(209,12,38)" fg:x="12457" fg:w="8"/><text x="32.3466%" y="95.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (8 samples, 0.02%)</title><rect x="32.1198%" y="69" width="0.0206%" height="15" fill="rgb(227,1,9)" fg:x="12466" fg:w="8"/><text x="32.3698%" y="79.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (3,682 samples, 9.49%)</title><rect x="22.6843%" y="245" width="9.4870%" height="15" fill="rgb(248,47,43)" fg:x="8804" fg:w="3682"/><text x="22.9343%" y="255.50">itertools::Ite..</text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (265 samples, 0.68%)</title><rect x="31.4885%" y="229" width="0.6828%" height="15" fill="rgb(221,10,30)" fg:x="12221" fg:w="265"/><text x="31.7385%" y="239.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (214 samples, 0.55%)</title><rect x="31.6199%" y="213" width="0.5514%" height="15" fill="rgb(210,229,1)" fg:x="12272" fg:w="214"/><text x="31.8699%" y="223.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (177 samples, 0.46%)</title><rect x="31.7152%" y="197" width="0.4561%" height="15" fill="rgb(222,148,37)" fg:x="12309" fg:w="177"/><text x="31.9652%" y="207.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (153 samples, 0.39%)</title><rect x="31.7771%" y="181" width="0.3942%" height="15" fill="rgb(234,67,33)" fg:x="12333" fg:w="153"/><text x="32.0271%" y="191.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (128 samples, 0.33%)</title><rect x="31.8415%" y="165" width="0.3298%" height="15" fill="rgb(247,98,35)" fg:x="12358" fg:w="128"/><text x="32.0915%" y="175.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (109 samples, 0.28%)</title><rect x="31.8904%" y="149" width="0.2808%" height="15" fill="rgb(247,138,52)" fg:x="12377" fg:w="109"/><text x="32.1404%" y="159.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (80 samples, 0.21%)</title><rect x="31.9652%" y="133" width="0.2061%" height="15" fill="rgb(213,79,30)" fg:x="12406" fg:w="80"/><text x="32.2152%" y="143.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (59 samples, 0.15%)</title><rect x="32.0193%" y="117" width="0.1520%" height="15" fill="rgb(246,177,23)" fg:x="12427" fg:w="59"/><text x="32.2693%" y="127.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (36 samples, 0.09%)</title><rect x="32.0785%" y="101" width="0.0928%" height="15" fill="rgb(230,62,27)" fg:x="12450" fg:w="36"/><text x="32.3285%" y="111.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (21 samples, 0.05%)</title><rect x="32.1172%" y="85" width="0.0541%" height="15" fill="rgb(216,154,8)" fg:x="12465" fg:w="21"/><text x="32.3672%" y="95.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (12 samples, 0.03%)</title><rect x="32.1404%" y="69" width="0.0309%" height="15" fill="rgb(244,35,45)" fg:x="12474" fg:w="12"/><text x="32.3904%" y="79.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="32.1558%" y="53" width="0.0155%" height="15" fill="rgb(251,115,12)" fg:x="12480" fg:w="6"/><text x="32.4058%" y="63.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (4 samples, 0.01%)</title><rect x="32.1610%" y="37" width="0.0103%" height="15" fill="rgb(240,54,50)" fg:x="12482" fg:w="4"/><text x="32.4110%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37 samples, 0.10%)</title><rect x="32.5655%" y="213" width="0.0953%" height="15" fill="rgb(233,84,52)" fg:x="12639" fg:w="37"/><text x="32.8155%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (108 samples, 0.28%)</title><rect x="32.4109%" y="229" width="0.2783%" height="15" fill="rgb(207,117,47)" fg:x="12579" fg:w="108"/><text x="32.6609%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.03%)</title><rect x="32.6608%" y="213" width="0.0283%" height="15" fill="rgb(249,43,39)" fg:x="12676" fg:w="11"/><text x="32.9108%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.04%)</title><rect x="32.7562%" y="213" width="0.0361%" height="15" fill="rgb(209,38,44)" fg:x="12713" fg:w="14"/><text x="33.0062%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="32.7794%" y="197" width="0.0129%" height="15" fill="rgb(236,212,23)" fg:x="12722" fg:w="5"/><text x="33.0294%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.03%)</title><rect x="32.8515%" y="181" width="0.0258%" height="15" fill="rgb(242,79,21)" fg:x="12750" fg:w="10"/><text x="33.1015%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (74 samples, 0.19%)</title><rect x="32.6892%" y="229" width="0.1907%" height="15" fill="rgb(211,96,35)" fg:x="12687" fg:w="74"/><text x="32.9392%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.09%)</title><rect x="32.7922%" y="213" width="0.0876%" height="15" fill="rgb(253,215,40)" fg:x="12727" fg:w="34"/><text x="33.0422%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.05%)</title><rect x="32.8283%" y="197" width="0.0515%" height="15" fill="rgb(211,81,21)" fg:x="12741" fg:w="20"/><text x="33.0783%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.02%)</title><rect x="32.9185%" y="197" width="0.0180%" height="15" fill="rgb(208,190,38)" fg:x="12776" fg:w="7"/><text x="33.1685%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.05%)</title><rect x="32.8979%" y="213" width="0.0515%" height="15" fill="rgb(235,213,38)" fg:x="12768" fg:w="20"/><text x="33.1479%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.01%)</title><rect x="32.9365%" y="197" width="0.0129%" height="15" fill="rgb(237,122,38)" fg:x="12783" fg:w="5"/><text x="33.1865%" y="207.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (303 samples, 0.78%)</title><rect x="32.1713%" y="245" width="0.7807%" height="15" fill="rgb(244,218,35)" fg:x="12486" fg:w="303"/><text x="32.4213%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (26 samples, 0.07%)</title><rect x="32.8850%" y="229" width="0.0670%" height="15" fill="rgb(240,68,47)" fg:x="12763" fg:w="26"/><text x="33.1350%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.05%)</title><rect x="32.9752%" y="197" width="0.0464%" height="15" fill="rgb(210,16,53)" fg:x="12798" fg:w="18"/><text x="33.2252%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.08%)</title><rect x="32.9520%" y="229" width="0.0773%" height="15" fill="rgb(235,124,12)" fg:x="12789" fg:w="30"/><text x="33.2020%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.06%)</title><rect x="32.9675%" y="213" width="0.0618%" height="15" fill="rgb(224,169,11)" fg:x="12795" fg:w="24"/><text x="33.2175%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="33.0808%" y="213" width="0.0180%" height="15" fill="rgb(250,166,2)" fg:x="12839" fg:w="7"/><text x="33.3308%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="33.1272%" y="181" width="0.0103%" height="15" fill="rgb(242,216,29)" fg:x="12857" fg:w="4"/><text x="33.3772%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 0.11%)</title><rect x="33.0293%" y="229" width="0.1134%" height="15" fill="rgb(230,116,27)" fg:x="12819" fg:w="44"/><text x="33.2793%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.04%)</title><rect x="33.0989%" y="213" width="0.0438%" height="15" fill="rgb(228,99,48)" fg:x="12846" fg:w="17"/><text x="33.3489%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.03%)</title><rect x="33.1169%" y="197" width="0.0258%" height="15" fill="rgb(253,11,6)" fg:x="12853" fg:w="10"/><text x="33.3669%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.06%)</title><rect x="33.4158%" y="197" width="0.0593%" height="15" fill="rgb(247,143,39)" fg:x="12969" fg:w="23"/><text x="33.6658%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (73 samples, 0.19%)</title><rect x="33.3050%" y="213" width="0.1881%" height="15" fill="rgb(236,97,10)" fg:x="12926" fg:w="73"/><text x="33.5550%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.02%)</title><rect x="33.4750%" y="197" width="0.0180%" height="15" fill="rgb(233,208,19)" fg:x="12992" fg:w="7"/><text x="33.7250%" y="207.50"></text></g><g><title>core::str::count::char_count_general_case (4 samples, 0.01%)</title><rect x="33.4931%" y="213" width="0.0103%" height="15" fill="rgb(216,164,2)" fg:x="12999" fg:w="4"/><text x="33.7431%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (216 samples, 0.56%)</title><rect x="32.9520%" y="245" width="0.5565%" height="15" fill="rgb(220,129,5)" fg:x="12789" fg:w="216"/><text x="33.2020%" y="255.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (142 samples, 0.37%)</title><rect x="33.1427%" y="229" width="0.3659%" height="15" fill="rgb(242,17,10)" fg:x="12863" fg:w="142"/><text x="33.3927%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.04%)</title><rect x="33.5111%" y="229" width="0.0412%" height="15" fill="rgb(242,107,0)" fg:x="13006" fg:w="16"/><text x="33.7611%" y="239.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (15 samples, 0.04%)</title><rect x="33.5137%" y="213" width="0.0386%" height="15" fill="rgb(251,28,31)" fg:x="13007" fg:w="15"/><text x="33.7637%" y="223.50"></text></g><g><title>core::str::count::char_count_general_case (11 samples, 0.03%)</title><rect x="33.5240%" y="197" width="0.0283%" height="15" fill="rgb(233,223,10)" fg:x="13011" fg:w="11"/><text x="33.7740%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.05%)</title><rect x="33.8487%" y="117" width="0.0541%" height="15" fill="rgb(215,21,27)" fg:x="13137" fg:w="21"/><text x="34.0987%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (46 samples, 0.12%)</title><rect x="33.7945%" y="133" width="0.1185%" height="15" fill="rgb(232,23,21)" fg:x="13116" fg:w="46"/><text x="34.0445%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="33.9028%" y="117" width="0.0103%" height="15" fill="rgb(244,5,23)" fg:x="13158" fg:w="4"/><text x="34.1528%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (122 samples, 0.31%)</title><rect x="33.6013%" y="149" width="0.3143%" height="15" fill="rgb(226,81,46)" fg:x="13041" fg:w="122"/><text x="33.8513%" y="159.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by (288 samples, 0.74%)</title><rect x="33.5601%" y="229" width="0.7421%" height="15" fill="rgb(247,70,30)" fg:x="13025" fg:w="288"/><text x="33.8101%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (288 samples, 0.74%)</title><rect x="33.5601%" y="213" width="0.7421%" height="15" fill="rgb(212,68,19)" fg:x="13025" fg:w="288"/><text x="33.8101%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (288 samples, 0.74%)</title><rect x="33.5601%" y="197" width="0.7421%" height="15" fill="rgb(240,187,13)" fg:x="13025" fg:w="288"/><text x="33.8101%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (288 samples, 0.74%)</title><rect x="33.5601%" y="181" width="0.7421%" height="15" fill="rgb(223,113,26)" fg:x="13025" fg:w="288"/><text x="33.8101%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (288 samples, 0.74%)</title><rect x="33.5601%" y="165" width="0.7421%" height="15" fill="rgb(206,192,2)" fg:x="13025" fg:w="288"/><text x="33.8101%" y="175.50"></text></g><g><title>xword_gen::xword::XWordInternal::word_is_compatible (150 samples, 0.39%)</title><rect x="33.9156%" y="149" width="0.3865%" height="15" fill="rgb(241,108,4)" fg:x="13163" fg:w="150"/><text x="34.1656%" y="159.50"></text></g><g><title>core::str::count::char_count_general_case (81 samples, 0.21%)</title><rect x="34.0934%" y="133" width="0.2087%" height="15" fill="rgb(247,173,49)" fg:x="13232" fg:w="81"/><text x="34.3434%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="34.3124%" y="213" width="0.0180%" height="15" fill="rgb(224,114,35)" fg:x="13317" fg:w="7"/><text x="34.5624%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="34.3305%" y="213" width="0.0103%" height="15" fill="rgb(245,159,27)" fg:x="13324" fg:w="4"/><text x="34.5805%" y="223.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::add_special_case (16 samples, 0.04%)</title><rect x="34.3021%" y="229" width="0.0412%" height="15" fill="rgb(245,172,44)" fg:x="13313" fg:w="16"/><text x="34.5521%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.01%)</title><rect x="34.3434%" y="213" width="0.0129%" height="15" fill="rgb(236,23,11)" fg:x="13329" fg:w="5"/><text x="34.5934%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.01%)</title><rect x="34.3459%" y="197" width="0.0103%" height="15" fill="rgb(205,117,38)" fg:x="13330" fg:w="4"/><text x="34.5959%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.02%)</title><rect x="34.3562%" y="213" width="0.0206%" height="15" fill="rgb(237,72,25)" fg:x="13334" fg:w="8"/><text x="34.6062%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.01%)</title><rect x="34.3665%" y="197" width="0.0103%" height="15" fill="rgb(244,70,9)" fg:x="13338" fg:w="4"/><text x="34.6165%" y="207.50"></text></g><g><title>_start (13,352 samples, 34.40%)</title><rect x="0.0000%" y="405" width="34.4026%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="415.50">_start</text></g><g><title>__libc_start_main_impl (13,352 samples, 34.40%)</title><rect x="0.0000%" y="389" width="34.4026%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="399.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (13,352 samples, 34.40%)</title><rect x="0.0000%" y="373" width="34.4026%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="383.50">__libc_start_call_main</text></g><g><title>main (13,352 samples, 34.40%)</title><rect x="0.0000%" y="357" width="34.4026%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (13,352 samples, 34.40%)</title><rect x="0.0000%" y="341" width="34.4026%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (13,352 samples, 34.40%)</title><rect x="0.0000%" y="325" width="34.4026%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (13,352 samples, 34.40%)</title><rect x="0.0000%" y="309" width="34.4026%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>xword_gen::main (13,352 samples, 34.40%)</title><rect x="0.0000%" y="293" width="34.4026%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="303.50">xword_gen::main</text></g><g><title>util::time::time_fn (13,352 samples, 34.40%)</title><rect x="0.0000%" y="277" width="34.4026%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="287.50">util::time::time_fn</text></g><g><title>&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword::XWordTraits&gt;::solve (13,352 samples, 34.40%)</title><rect x="0.0000%" y="261" width="34.4026%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="13352"/><text x="0.2500%" y="271.50">&lt;xword_gen::xword::XWordWithRequired as xword_gen::xword..</text></g><g><title>xword_gen::xword::XWordWithRequired::build_dlx_solver (347 samples, 0.89%)</title><rect x="33.5085%" y="245" width="0.8941%" height="15" fill="rgb(209,9,3)" fg:x="13005" fg:w="347"/><text x="33.7585%" y="255.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::from_words (23 samples, 0.06%)</title><rect x="34.3434%" y="229" width="0.0593%" height="15" fill="rgb(230,59,30)" fg:x="13329" fg:w="23"/><text x="34.5934%" y="239.50"></text></g><g><title>xword_gen::word_bank::LetterFrequencyMap::insert (10 samples, 0.03%)</title><rect x="34.3769%" y="213" width="0.0258%" height="15" fill="rgb(209,121,21)" fg:x="13342" fg:w="10"/><text x="34.6269%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.01%)</title><rect x="34.3897%" y="197" width="0.0129%" height="15" fill="rgb(220,109,13)" fg:x="13347" fg:w="5"/><text x="34.6397%" y="207.50"></text></g><g><title>&lt;dlx::dlx::DlxExplorer&lt;D,I,N&gt; as core::ops::drop::Drop&gt;::drop (832 samples, 2.14%)</title><rect x="34.4129%" y="325" width="2.1437%" height="15" fill="rgb(232,18,1)" fg:x="13356" fg:w="832"/><text x="34.6629%" y="335.50">&lt;..</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (829 samples, 2.14%)</title><rect x="34.4207%" y="309" width="2.1360%" height="15" fill="rgb(215,41,42)" fg:x="13359" fg:w="829"/><text x="34.6707%" y="319.50">d..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (221 samples, 0.57%)</title><rect x="36.9947%" y="309" width="0.5694%" height="15" fill="rgb(224,123,36)" fg:x="14358" fg:w="221"/><text x="37.2447%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.01%)</title><rect x="37.5512%" y="293" width="0.0129%" height="15" fill="rgb(240,125,3)" fg:x="14574" fg:w="5"/><text x="37.8012%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="37.5538%" y="277" width="0.0103%" height="15" fill="rgb(205,98,50)" fg:x="14575" fg:w="4"/><text x="37.8038%" y="287.50"></text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices (11,317 samples, 29.16%)</title><rect x="37.5641%" y="309" width="29.1593%" height="15" fill="rgb(205,185,37)" fg:x="14579" fg:w="11317"/><text x="37.8141%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::cover_remaining_choices</text></g><g><title>all (38,811 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="38811"/><text x="0.2500%" y="447.50"></text></g><g><title>xword_gen (38,811 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="38811"/><text x="0.2500%" y="431.50">xword_gen</text></g><g><title>clone3 (25,459 samples, 65.60%)</title><rect x="34.4026%" y="405" width="65.5974%" height="15" fill="rgb(235,201,11)" fg:x="13352" fg:w="25459"/><text x="34.6526%" y="415.50">clone3</text></g><g><title>start_thread (25,459 samples, 65.60%)</title><rect x="34.4026%" y="389" width="65.5974%" height="15" fill="rgb(207,46,11)" fg:x="13352" fg:w="25459"/><text x="34.6526%" y="399.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (25,459 samples, 65.60%)</title><rect x="34.4026%" y="373" width="65.5974%" height="15" fill="rgb(241,35,35)" fg:x="13352" fg:w="25459"/><text x="34.6526%" y="383.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (25,459 samples, 65.60%)</title><rect x="34.4026%" y="357" width="65.5974%" height="15" fill="rgb(243,32,47)" fg:x="13352" fg:w="25459"/><text x="34.6526%" y="367.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (25,459 samples, 65.60%)</title><rect x="34.4026%" y="341" width="65.5974%" height="15" fill="rgb(247,202,23)" fg:x="13352" fg:w="25459"/><text x="34.6526%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,623 samples, 63.44%)</title><rect x="36.5566%" y="325" width="63.4434%" height="15" fill="rgb(219,102,11)" fg:x="14188" fg:w="24623"/><text x="36.8066%" y="335.50">&lt;dlx::dlx::MappedDlxIterator&lt;I,N,Iter,R,F,S&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices (12,915 samples, 33.28%)</title><rect x="66.7234%" y="309" width="33.2766%" height="15" fill="rgb(243,110,44)" fg:x="25896" fg:w="12915"/><text x="66.9734%" y="319.50">dlx::dlx::Dlx&lt;I,N&gt;::uncover_remaining_choices</text></g></svg></svg>